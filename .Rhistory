#return(mat.result)
}
df.data
result <- fnHexTest(df.data$days, df.data$sal)
result
df.data$age
rm(list = ls())
vct.names <- c("mark", "fred", "ben")
vct.days <- c(1, 3, 5)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, days = vct.days, sal = vct.salary)
#look aat this
# example of seq_along
a <- c(8, 9, 10)
seq_along(a)
# replace testVariable by:
# syntax do.call(what (is a function), args, quote = FALSE, envir = parent.frame())
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 2
vct3 <- (x * y) + 3
vct4 <- (x * y) + 4
vct5 <- (x * y) + 5
vct6 <- (x * y) + 6
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
return(c(vecta, vectb))
#mat.result <- matrix(c(vecta, vectb), nrow = 6)
#return(mat.result)
}
result <- fnHexTest(df.data$days, df.data$sal)
result
matrix(result, nrow = nrow(df.data) * 6)
natBanes <- list(NULL, c("x", "y"))
matBanes <- list(NULL, c("x", "y"))
matBanes
matNanes <- list(NULL, c("x", "y"))
result <- fnHexTest(df.data$days, df.data$sal)
matNames <- list(NULL, c("x", "y"))
matResult <- matrix(result, nrow = nrow(df.data) * 6, dimnames = matNames)
matResult
rep(df.data, each = 6)
fnCalcBand <- function(age) {
v1 <- age + 1
v2 <- age + 2
v3 <- age + 3
v4 <- age + 4
v5 <- age + 5
v6 <- age + 6
vct.result <- c(v1, v2, v3, v4, v5, v6)
#cat(vct.result)
mat.result <- matrix(vct.result, nrow = 6)
return(mat.result)
}
vct.names <- c("mark", "yukari", "ben")
vct.ages <- c(49, 45, 47)
df.polygons <- data.frame(name = vct.names, age = vct.ages)
df.polygons
testVariable <- rep(seq_len(nrow(df.polygons)), each=6)
testVariable
testVariable <- rep(seq_len(nrow(df.polygons)), each=6)
tmp.row <- rep(1: nrow(df.data), each = 6)
tmp.row
tmp.row <- rep(1: nrow(df.data), each = 6)
df.multi <- df.data[tmp.row, ]
df.multi
df.final <- cbind(df.mult, matResult)
df.final <- cbind(df.multi, matResult)
df.final
df.data$name
ids <- df.data$name
rep(ids, each = 6)
rep(ids, each = 6)
rep(1:6, each = 6)
rep(1:6, 6)
?rep
rep(1:6, time = 6)
repIds <- rep(ids, each = 6)
vxtNum <- rep(1:6, time = 6)
paste0(repids, "_", vxtNum)
repIds <- rep(ids, each = 6)
vxtNum <- rep(1:6, time = 6)
paste0(repIds, "_", vxtNum)
repIds <- rep(ids, each = 6)
vxtNum <- rep(1:6, time = 6)
rNames <- paste0(repIds, "_", vxtNum)
row.names(df.final) <- rNames
nrow(df.final)
length(rNames)
repIds
length(repIds)
length(vxtNum)
repIds <- rep(ids, each = 6)
vxtNum <- rep(1:6, time = nrow(df.data))
rNames <- paste0(repIds, "_", vxtNum)
row.names(df.final) <- rNames
df.final
vct.names <- c("a", "b")
vct.x <- c(10, 20)
vct.y <- c(100, 200)
fnVector <- function(x) {
y <- rbind(x+1, x+2, x+3)
return(y)
}
df.output <- data.frame(apply(df.data[, c("x", "y")], 2, function(x) fnVector(x)))
vct.names <- c("a", "b")
vct.x <- c(10, 20)
vct.y <- c(100, 200)
df.data <- data.frame(name = vct.names, x = vct.x, y = vct.y)
fnVector <- function(x) {
y <- rbind(x+1, x+2, x+3)
return(y)
}
df.output <- data.frame(apply(df.data[, c("x", "y")], 2, function(x) fnVector(x)))
df.output
datSub <- df.data[, c("x", "y")]
datSub
apply(datSub, 2, sum)
install.packages("treemap")
data(GNI2010)
library(treemap)
data(GNI2010)
str(GNI2010)
nrow(GNI2010)
treemap(GNI2010,
index=c("continent", "iso3"),
vSize="population",
vColor="GNI",
type="value")
GNI2010$continent
unique(GNI2010$continent)
data(business)
head(business)
names(business)
nrow(business)
treemap(business,
index=c("NACE1", "NACE2", "NACE3"),
vSize="turnover",
type="index")
unique(business$NACE1)
bus1 <- business[business$NACE1=="C - Manufacturing",]
bus1[1:10, 1:5]
bus1[1:10, 1:2]
unCol <- unique(bus1[, c("NACE2", "NACE3")])
unCol
nrow(unCol)
ncol(unCol)
unCol
length(unique(bus1$NACE2))
length(unique(bus1$NACE3))
24 * 95
treemap(bus1,
index=c("NACE2", "NACE3"),
vSize=c("employees"),
type="index")
unColbus <- unique(bus1[, c("NACE1", "NACE2")])
unColbus
length(unColbus)
nrow(unColbus)
length(unique(business$NACE1))
length(unique(business$NACE2))
treemap(business,
index=c("NACE1", "NACE2"),
vSize="employees",
title.legend="number of NACE4 categories",
type="value")
unColbus <- unique(business[, c("NACE1", "NACE2")])
nrow(unColbus)
print("hi there")
TheFont <- 3
CARG_period <- 3
load("/Volumes/WD-100G-FAT/ME-Data/Exports_By_Country.rda")
export_salmon <- Exports_By_Country %>%
filter(substr(Harmonised_System_Code, 1, 6) %in% c("030212", "030213", "030214", "030219", "030310", "030311","030312", "030313", "030319",
"030322", "030441", "030481", "030541")
) %>%
mutate(Year = year(Date)) %>%
data.frame()
sink.reset <- function(){
for(i in seq_len(sink.number())){
sink(NULL)
}
}
library(knitr)
library(reshape2)
library(lubridate)
library(RODBC)
library(Defaults)
library(xtable)
library(ggplot2)
# library(sqldf)
# library(plyr)
library(stringr)
library(magrittr)
library(mbie)
library(mbieDBmisc)
library(scales)
library(dplyr)
library(tidyr)
library(zoo)
library(gridExtra)
library(Cairo)
load("/Volumes/WD-100G-FAT/ME-Data/Exports_By_Country.rda")
export_salmon <- Exports_By_Country %>%
filter(substr(Harmonised_System_Code, 1, 6) %in% c("030212", "030213", "030214", "030219", "030310", "030311","030312", "030313", "030319",
"030322", "030441", "030481", "030541")
) %>%
mutate(Year = year(Date)) %>%
data.frame()
sink.reset <- function(){
for(i in seq_len(sink.number())){
sink(NULL)
}
}
End_Date <- max(export_salmon$Date)
Report_Year <- ifelse(month(End_Date) == 12, year(End_Date), year(End_Date) - 1)
salmon_export_title <- paste0("\\small NZ Salmon Export Stats (year ending ", End_Date, ")")
sink("output/salmon_export_title.txt")
cat(salmon_export_title)
sink()
export_salmon_sum <- export_salmon %>%
group_by(Date) %>%
summarise(Sum_Exports_Qty = sum(Total_Exports_Qty),
Sum_Exports_NZD_fob = sum(Total_Exports_NZD_fob)/10^6,
Unit_Price = round(Sum_Exports_NZD_fob *10^6 / Sum_Exports_Qty, 1)) %>%
data.frame() %>%
gather("Domain", "Value", 2:4)
export_salmon_sum_value <- export_salmon_sum %>%
filter(Domain == 'Sum_Exports_NZD_fob')
export_salmon_sum_price <- export_salmon_sum %>%
filter(Domain == 'Unit_Price')
export_salmon_country_count <- export_salmon %>%
select(Date, Country) %>%
unique() %>%
group_by(Date) %>%
summarise(Num_Country = n())
salmon_value_plot <- ggplot(export_salmon_sum_value, aes(x = Date, y = Value)) +
geom_line() +
theme_light(4, base_family = TheFont) +
scale_colour_manual("Domain", values = tourism.cols("Alternating")) +
scale_y_continuous("Total Value (NZ$Mil)\n") +
theme(legend.text = element_text(lineheight = 0.3), legend.key.height = unit(0.4, "cm")) +
geom_smooth() +
theme(axis.title.x = element_blank()) +
theme(legend.key = element_blank()) +
ggtitle(paste0("Salmon Export: Total Monthly Value (year ending ", End_Date, ")"))
salmon_value_plot
salmon_value_plot <- ggplot(export_salmon_sum_value, aes(x = Date, y = Value)) +
geom_line() +
theme_light(4, base_family = TheFont) +
scale_colour_manual("Domain", values = tourism.cols("Alternating")) +
scale_y_continuous("Total Value (NZ$Mil)\n") +
theme(legend.text = element_text(lineheight = 0.3), legend.key.height = unit(0.4, "cm")) +
geom_smooth() +
theme(axis.title.x = element_blank()) +
theme(legend.key = element_blank()) +
ggtitle(paste0("Salmon Export: Total Monthly Value (year ending ", End_Date, ")"))
salmon_value_plot
par()$family
par(family="mono")
par()$family
salmon_value_plot <- ggplot(export_salmon_sum_value, aes(x = Date, y = Value)) +
geom_line() +
theme_light(4, base_family = TheFont) +
scale_colour_manual("Domain", values = tourism.cols("Alternating")) +
scale_y_continuous("Total Value (NZ$Mil)\n") +
theme(legend.text = element_text(lineheight = 0.3), legend.key.height = unit(0.4, "cm")) +
geom_smooth() +
theme(axis.title.x = element_blank()) +
theme(legend.key = element_blank()) +
ggtitle(paste0("Salmon Export: Total Monthly Value (year ending ", End_Date, ")"))
salmon_value_plot
salmon_value_plot <- ggplot(export_salmon_sum_value, aes(x = Date, y = Value)) +
geom_line() +
theme_light(4, base_family = 4) +
scale_colour_manual("Domain", values = tourism.cols("Alternating")) +
scale_y_continuous("Total Value (NZ$Mil)\n") +
theme(legend.text = element_text(lineheight = 0.3), legend.key.height = unit(0.4, "cm")) +
geom_smooth() +
theme(axis.title.x = element_blank()) +
theme(legend.key = element_blank()) +
ggtitle(paste0("Salmon Export: Total Monthly Value (year ending ", End_Date, ")"))
salmon_value_plot
salmon_value_plot <- ggplot(export_salmon_sum_value, aes(x = Date, y = Value)) +
geom_line() +
theme_light(4, base_family = 2) +
scale_colour_manual("Domain", values = tourism.cols("Alternating")) +
scale_y_continuous("Total Value (NZ$Mil)\n") +
theme(legend.text = element_text(lineheight = 0.3), legend.key.height = unit(0.4, "cm")) +
geom_smooth() +
theme(axis.title.x = element_blank()) +
theme(legend.key = element_blank()) +
ggtitle(paste0("Salmon Export: Total Monthly Value (year ending ", End_Date, ")"))
salmon_value_plot
aa <- theme_light(4, base_family = TheFont)
aa
salmon_value_plot <- ggplot(export_salmon_sum_value, aes(x = Date, y = Value)) +
geom_line() +
theme_light(4, base_family = "sans") +
scale_colour_manual("Domain", values = tourism.cols("Alternating")) +
scale_y_continuous("Total Value (NZ$Mil)\n") +
theme(legend.text = element_text(lineheight = 0.3), legend.key.height = unit(0.4, "cm")) +
geom_smooth() +
theme(axis.title.x = element_blank()) +
theme(legend.key = element_blank()) +
ggtitle(paste0("Salmon Export: Total Monthly Value (year ending ", End_Date, ")"))
salmon_value_plot
salmon_value_plot <- ggplot(export_salmon_sum_value, aes(x = Date, y = Value)) +
geom_line() +
theme_light(4, base_family = "arial") +
scale_colour_manual("Domain", values = tourism.cols("Alternating")) +
scale_y_continuous("Total Value (NZ$Mil)\n") +
theme(legend.text = element_text(lineheight = 0.3), legend.key.height = unit(0.4, "cm")) +
geom_smooth() +
theme(axis.title.x = element_blank()) +
theme(legend.key = element_blank()) +
ggtitle(paste0("Salmon Export: Total Monthly Value (year ending ", End_Date, ")"))
salmon_value_plot
salmon_value_plot <- ggplot(export_salmon_sum_value, aes(x = Date, y = Value)) +
geom_line() +
theme_light(4, base_family = "Arial") +
scale_colour_manual("Domain", values = tourism.cols("Alternating")) +
scale_y_continuous("Total Value (NZ$Mil)\n") +
theme(legend.text = element_text(lineheight = 0.3), legend.key.height = unit(0.4, "cm")) +
geom_smooth() +
theme(axis.title.x = element_blank()) +
theme(legend.key = element_blank()) +
ggtitle(paste0("Salmon Export: Total Monthly Value (year ending ", End_Date, ")"))
salmon_value_plot
?gsub
?dnorm
exp(1)
2 * pi
fn_normal <- function(a_vct_x, a_mu, a_sd )  {
a <- exp(-1/2*((a_vct_x - a_mu) / a_sd)
}
fn_normal <- function(a_vct_x, a_mu, a_sd )  {
exponent <- -1/2*((a_vct_x - a_mu) / a_sd
}
sqrt(9)
fn_normal <- function(a_vct_x, a_mu, a_sd )  {
exponent <- -1/2*((a_vct_x - a_mu) / a_sd)
multplicand <- 1 / (a_sd * sqrt(2 * pi))
return(multplicand * e(exponent))
}
fn_normal(5, 10, 1)
fn_normal <- function(a_vct_x, a_mu, a_sd )  {
exponent <- -1/2*((a_vct_x - a_mu) / a_sd)
multplicand <- 1 / (a_sd * sqrt(2 * pi))
return(multplicand * exp(exponent))
}
fn_normal(5, 10, 1)
fn_normal(1:10, 10, 1)
curve(fn_normal(1:10, 10, 1))
mry <- do.call(rbind, by(movies, round(movies$rating), function(df) {
nums <- tapply(df$length, df$year, length)
data.frame(rating=round(df$rating[1]), year = as.numeric(names(nums)), number=as.vector(nums))
}))
library(ggplot2)
mry <- do.call(rbind, by(movies, round(movies$rating), function(df) {
nums <- tapply(df$length, df$year, length)
data.frame(rating=round(df$rating[1]), year = as.numeric(names(nums)), number=as.vector(nums))
}))
mry
str(mry)
vct_sd1 <- fn_normal(1:1000, 0, 1)
library(ggplot2)
vct_x_range <- -1000:1000
vct_sda <- fn_normal(vct_x_range, 0, 1)
vct_sdb <- fn_normal(vct_x_range, 0, 2)
vct_sdc <- fn_normal(vct_x_range, 0, 2)
?seq
seq(from -5, to 5, length = 10)
seq(from = -5, to  = 5, length = 10)
seq(from = -5, to  = 5, length = 1000)
?rep
rep(c("a", "b", "c") each = 5)
rep(c("a", "b", "c"), each = 5)
vct_x  <- rep(1:vct_length, each = 3)
rep(c("a", "b", "c"), each = 5)
rep(1:vct_length, each = 3)
vct_length <- 1000
rep(1:vct_length, each = 3)
rep(1:vct_length, times = 3)
rep(c("a", "b", "c"), each = vct_length)
vct_sda <- fn_normal(vct_x_range, 0, 1)
vct_sdb <- fn_normal(vct_x_range, 0, 2)
vct_sdc <- fn_normal(vct_x_range, 0, 3)
vct_values <- c(vct_sda, vct_sdb, vct_sda)
vct_values
vct_length <- 1000
vct_x_range <- seq(from = -5, to  = 5, length = vct_length )
vct_sda <- fn_normal(vct_x_range, 0, 1)
vct_sdb <- fn_normal(vct_x_range, 0, 2)
vct_sdc <- fn_normal(vct_x_range, 0, 3)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(1:vct_length, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sda)
df_values <- (x = vct_x , id=  vct_id, values = vct_values )
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
head(df_values)
vct_sda <- fn_normal(vct_x_range, 0, 1)
vct_sda
dnorm(vct_x_range , 0 ,1)
vct_length <- 1000
vct_x_range <- seq(from = -5, to  = 5, length = vct_length )
vct_sda <- dnorm(vct_x_range, 0, 1)
vct_sdb <- dnorm(vct_x_range, 0, 2)
vct_sdc <- dnorm(vct_x_range, 0, 3)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(1:vct_length, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sda)
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
df_values
p <- ggplot(df_values, aes(x=x, y=values, group=id))
p + geom_line()
vct_length <- 1000
vct_x_range <- seq(from = -5, to  = 5, length = vct_length )
vct_sda <- dnorm(vct_x_range, 0, 1)
vct_sdb <- dnorm(vct_x_range, 0, 2)
vct_sdc <- dnorm(vct_x_range, 0, 3)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(vct_x_range, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sda)
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
p <- ggplot(df_values, aes(x=x, y=values, group=id))
p + geom_line()
vct_length <- 1000
vct_x_range <- seq(from = -5, to  = 5, length = vct_length )
vct_sda <- dnorm(vct_x_range, 0, 1)
vct_sdb <- dnorm(vct_x_range, 0, 2)
vct_sdc <- dnorm(vct_x_range, 0, 3)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(vct_x_range, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sdc)
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
p <- ggplot(df_values, aes(x=x, y=values, group=id))
p + geom_line()
vct_length <- 1000
vct_x_range <- seq(from = -5, to  = 5, length = vct_length )
vct_sda <- dnorm(vct_x_range, 0, 0.5)
vct_sdb <- dnorm(vct_x_range, 0, 1.0)
vct_sdc <- dnorm(vct_x_range, 0, 1.5)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(vct_x_range, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sdc)
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
p <- ggplot(df_values, aes(x=x, y=values, group=id))
p + geom_line()
vct_length <- 1000
vct_x_range <- seq(from = -5, to  = 5, length = vct_length )
vct_sda <- dnorm(vct_x_range, 0, 0.5)
vct_sdb <- dnorm(vct_x_range, 0, 1.0)
vct_sdc <- dnorm(vct_x_range, 0, 2.0)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(vct_x_range, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sdc)
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
p <- ggplot(df_values, aes(x=x, y=values, group=id))
p + geom_line()
vct_length <- 2000
vct_x_range <- seq(from = -8, to  = 8, length = vct_length )
vct_sda <- dnorm(vct_x_range, 0, 0.5)
vct_sdb <- dnorm(vct_x_range, 0, 1.0)
vct_sdc <- dnorm(vct_x_range, 0, 2.0)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(vct_x_range, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sdc)
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
p <- ggplot(df_values, aes(x=x, y=values, group=id))
p + geom_line()
vct_length <- 2000
z_extent <- 6
vct_x_range <- seq(from = (-1* z_extent), to  = z_extent, length = vct_length )
vct_sda <- dnorm(vct_x_range, 0, 0.5)
vct_sdb <- dnorm(vct_x_range, 0, 1.0)
vct_sdc <- dnorm(vct_x_range, 0, 2.0)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(vct_x_range, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sdc)
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
p <- ggplot(df_values, aes(x=x, y=values, group=id))
p + geom_line()
vct_length <- 2000
z_extent <- 6
vct_x_range <- seq(from = (-1* z_extent), to  = z_extent, length = vct_length )
vct_sda <- dnorm(vct_x_range, 0, 0.7)
vct_sdb <- dnorm(vct_x_range, 0, 1.0)
vct_sdc <- dnorm(vct_x_range, 0, 2.0)
vct_id <- rep(c("a", "b", "c"), each = vct_length)
vct_x  <- rep(vct_x_range, times = 3)
vct_values <- c(vct_sda, vct_sdb, vct_sdc)
df_values <- data.frame(x = vct_x,  id =  vct_id, values = vct_values )
p <- ggplot(df_values, aes(x=x, y=values, group=id))
p + geom_line()
getwd
getwd()
salary <- rnorm(100, mean = 50000, sd = 10000)
salary <- sort(salary)
mean(salary)
sd(salary)
set.seed(123)
salary <- rnorm(100, mean = 50000, sd = 10000)
salary <- sort(salary)
mean(salary)
median(salary)
salary
new_salary <- c(salary[1:99],1e06)
new_salary
median((new_salary))
median((new_salary)) == median(salary)
?runif
