seq_len(4)
seq_len(5)
# example of seq_along
a <- c(8, 9, 10)
seq_along(a)
# replace testVariable by:
anotherTest <- rep(1: nrow(df.polygons), each = 6)
# here is the function call
row1Age <- df.polygons[1, "age"]
sixAges <- fnCalcBand(row1Age)
row1SixTimes <- df.polygons[rep(1, each = 6),]
row1SixTimes$NewVal <- sixAges
# apply an anonymous function to all elements in a dataframe -- returns a matrix
# lapply returns a list (this is the workhorse)
# apply for matrix
#sapply is a user-friendly version and wrapper of lapply by default returning a
# vector, matrix or, if simplify = "array", an array if appropriate, defaults to returning
# ..a vector or matrix where possible.
#rapply - For when you want to apply a function to each element of a nested list structure,
sapply(df.polygons, function(x) x)
# this returns list
aa <- lapply(df.polygons, function(x) x)
# this returns data frame
aa <- as.data.frame(lapply(df.polygons, function(x) x))
# try this
do.call(rbind, lapply(my.list, data.frame, stringsAsFactors=FALSE))
# syntax do.call(what (is a function), args, quote = FALSE, envir = parent.frame())
data(iris)
# aris is a list
a.iris <- split(iris, iris$Species)
fnSimple <- function(input) {
aa <- vector(mode = "double")
aa[1] <- input * 2
aa[2] <- input * 3
return(aa)
}
fnAnother <- function(input) {
return(input * 2)
}
# call a function for just one column ..the most important column
# the following works
sapply(df.polygons[,"age"], fnAnother)
# this also works but returns n * 3 matrix
sapply(df.polygons[,"age"], fnSimple)
add <- function(x, y) {
print(x)
print(y)
x + y
}
sapply(1:10, add, 3)
fnTestM <- function(vct) {
print(vct)
}
sapply(df.polygons, fnTestM)
fnTestM <- function(vct) {
#print(vct)
return(vct$age + vct$day)
}
sapply(df.polygons, fnTestM)
fnTestM <- function(vct) {
#print(vct)
return(vct[2] + vct$day[3])
}
sapply(df.polygons, fnTestM)
fnTestM <- function(vct) {
#print(vct)
return(vct[2] + vct[3])
}
sapply(df.polygons, fnTestM)
fnTestM <- function(vct) {
#print(vct)
print(vct[2])
#return(vct[2] + vct[3])
}
aa <- sapply(df.polygons, fnTestM)
df.polygons
fnTestM <- function(vct) {
#print(vct)
print(vct)
#return(vct[2] + vct[3])
}
aa <- sapply(df.polygons, fnTestM)
fnTestM <- function(vct) {
#print(vct)
print("hi there")
print(vct)
#return(vct[2] + vct[3])
}
aa <- sapply(df.polygons, fnTestM)
aa <- sapply(df.polygons[, "age"], fnTestM)
df.polygons
aa <- sapply(df.polygons[, c("age", "day")], fnTestM)
aa
vct.names <- c("mark", "fred", "ben")
vct.days <- c(100, 35, 58)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, age = vct.ages, sal = vct.days)
vct.names <- c("mark", "fred", "ben")
vct.days <- c(100, 35, 58)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, age = vct.ages, sal = vct.days)
x=c(1,2,1,2,1,2)
y=c(3,4,5,4,3,2)
df=data.frame(x,y)
with(df,tapply(y,x,FUN=min))
df
?tapply
?with
fnhi < function(x1, x2) {
print(x1)
print(x2)
}
with(df,tapply(y,x,FUN=fnhi))
fnhi < function(x1, x2) {
print(x1)
print(x2)
}
fnhi <- function(x1, x2) {
print(x1)
print(x2)
}
with(df,tapply(y,x,FUN=fnhi))
100 * 1000
fnATimesB <- function(a, b) {
return(a * b)
}
vct.names <- c("mark", "fred", "ben")
vct.days <- c(1, 3, 5)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, age = vct.ages, sal = vct.days)
df.data
df.data <- data.frame(name = vct.names, age = vct.ages, sal = vct.days)
df.data
fnATimesB <- function(a, b) {
return(a * b)
}
vct.names <- c("mark", "fred", "ben")
vct.days <- c(1, 3, 5)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, days = vct.days, sal = vct.salary)
df.data
1 * 1000
3 * 4000
5 * 5000
?apply
vct.names <- c("mark", "fred", "ben")
vct.days <- c(100, 35, 58)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, age = vct.days, sal = vct.salary)
df.data
fnZZ <- function(x1, x2, x3) {
print(x1)
print(x2)
print(x3)
}
sapply(df.data, fnZZ, x[2], x[3])
fnZZ <- function(x1, x2, x3) {
print(x1)
print(x2)
print(x3)
}
aa <- sapply(df.data, fnZZ, x[2], x[3])
fnZZ <- function(x1, x2, x3) {
#print(x1)
#print(x2)
print(x3)
}
aa <- sapply(df.data, fnZZ, x[2], x[3])
df.data
df.data[2]
?matrix
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 1
vct3 <- (x * y) + 1
vct4 <- (x * y) + 1
vct5 <- (x * y) + 1
vct6 <- (x * y) + 1
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
mat.result <- matrix(c(vecta, vectb), nrow = 6)
}
fnHexTest(3,4)
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 1
vct3 <- (x * y) + 1
vct4 <- (x * y) + 1
vct5 <- (x * y) + 1
vct6 <- (x * y) + 1
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
mat.result <- matrix(c(vecta, vectb), nrow = 6)
return(mat.result)
}
fnHexTest(2,3)
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 2
vct3 <- (x * y) + 3
vct4 <- (x * y) + 4
vct5 <- (x * y) + 5
vct6 <- (x * y) + 6
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
mat.result <- matrix(c(vecta, vectb), nrow = 6)
return(mat.result)
}
fnHexTest(2,4)
fnATimesB <- function(a, b) {
return(a * b)
}
vct.names <- c("mark", "fred", "ben")
vct.days <- c(1, 3, 5)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, days = vct.days, sal = vct.salary)
sapply( rownames(df.data), function(x) {
fnATimesB( df.data[x,'days'], df.data[x,'sal'] )
} )
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 2
vct3 <- (x * y) + 3
vct4 <- (x * y) + 4
vct5 <- (x * y) + 5
vct6 <- (x * y) + 6
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
mat.result <- matrix(c(vecta, vectb), nrow = 6)
return(mat.result)
}
fnHexTest(4,5)
df.data(df.data$days, df.data$sal)
df.data
fnHexTest(df.data$days, df.data$sal)
df.data
fnHexTest(df.data[1,2], df.data[1,3])
df.data
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 2
vct3 <- (x * y) + 3
vct4 <- (x * y) + 4
vct5 <- (x * y) + 5
vct6 <- (x * y) + 6
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
return(c(vecta, vectb))
#mat.result <- matrix(c(vecta, vectb), nrow = 6)
#return(mat.result)
}
fnHexTest(2, 4)
df.data
fnHextTest(df.data$days. df.data$sal)
fnHextTest(df.data$days, df.data$sal)
fnHexTest(df.data$days, df.data$sal)
a <- fnHexTest(df.data$days, df.data$sal)
length(a)
vct.names <- c("mark", "fred", "ben")
vct.days <- c(100, 35, 58)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, age = vct.days, sal = vct.salary)
#look aat this
# example of seq_along
a <- c(8, 9, 10)
seq_along(a)
# replace testVariable by:
# syntax do.call(what (is a function), args, quote = FALSE, envir = parent.frame())
fnTestM <- function(vct) {
#print(vct)
print("hi there")
print(vct)
#return(vct[2] + vct[3])
}
# this is called three times..each time with different colums operates on a column by column basis
aa <- sapply(df.polygons[, c("age", "day")], fnTestM)
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 2
vct3 <- (x * y) + 3
vct4 <- (x * y) + 4
vct5 <- (x * y) + 5
vct6 <- (x * y) + 6
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
return(c(vecta, vectb))
#mat.result <- matrix(c(vecta, vectb), nrow = 6)
#return(mat.result)
}
result <- fnHexTest(df.data$days, df.data$sal)
rm(list = ls())
vct.names <- c("mark", "fred", "ben")
vct.days <- c(100, 35, 58)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, age = vct.days, sal = vct.salary)
#look aat this
# example of seq_along
a <- c(8, 9, 10)
seq_along(a)
# replace testVariable by:
# syntax do.call(what (is a function), args, quote = FALSE, envir = parent.frame())
fnTestM <- function(vct) {
#print(vct)
print("hi there")
print(vct)
#return(vct[2] + vct[3])
}
# this is called three times..each time with different colums operates on a column by column basis
aa <- sapply(df.polygons[, c("age", "day")], fnTestM)
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 2
vct3 <- (x * y) + 3
vct4 <- (x * y) + 4
vct5 <- (x * y) + 5
vct6 <- (x * y) + 6
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
return(c(vecta, vectb))
#mat.result <- matrix(c(vecta, vectb), nrow = 6)
#return(mat.result)
}
result <- fnHexTest(df.data$days, df.data$sal)
# apply an anonymous function to all elements in a dataframe -- returns a matrix
# lapply returns a list (this is the workhorse)
# apply for matrix
#sapply is a user-friendly version and wrapper of lapply by default returning a
# vector, matrix or, if simplify = "array", an array if appropriate, defaults to returning
# ..a vector or matrix where possible.
#rapply - For when you want to apply a function to each element of a nested list structure,
# do.call(rbind, lapply(my.list, data.frame, stringsAsFactors=FALSE))
result
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 2
vct3 <- (x * y) + 3
vct4 <- (x * y) + 4
vct5 <- (x * y) + 5
vct6 <- (x * y) + 6
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
return(c(vecta, vectb))
#mat.result <- matrix(c(vecta, vectb), nrow = 6)
#return(mat.result)
}
df.data
result <- fnHexTest(df.data$days, df.data$sal)
result
df.data$age
rm(list = ls())
vct.names <- c("mark", "fred", "ben")
vct.days <- c(1, 3, 5)
vct.salary <- c(1000, 4000, 5000)
df.data <- data.frame(name = vct.names, days = vct.days, sal = vct.salary)
#look aat this
# example of seq_along
a <- c(8, 9, 10)
seq_along(a)
# replace testVariable by:
# syntax do.call(what (is a function), args, quote = FALSE, envir = parent.frame())
fnHexTest <- function(x, y) {
vct1 <- (x * y) + 1
vct2 <- (x * y) + 2
vct3 <- (x * y) + 3
vct4 <- (x * y) + 4
vct5 <- (x * y) + 5
vct6 <- (x * y) + 6
vecta <- c(vct1, vct2, vct3, vct4, vct5, vct6)
vectb <- vecta *3
return(c(vecta, vectb))
#mat.result <- matrix(c(vecta, vectb), nrow = 6)
#return(mat.result)
}
result <- fnHexTest(df.data$days, df.data$sal)
result
matrix(result, nrow = nrow(df.data) * 6)
natBanes <- list(NULL, c("x", "y"))
matBanes <- list(NULL, c("x", "y"))
matBanes
matNanes <- list(NULL, c("x", "y"))
result <- fnHexTest(df.data$days, df.data$sal)
matNames <- list(NULL, c("x", "y"))
matResult <- matrix(result, nrow = nrow(df.data) * 6, dimnames = matNames)
matResult
rep(df.data, each = 6)
fnCalcBand <- function(age) {
v1 <- age + 1
v2 <- age + 2
v3 <- age + 3
v4 <- age + 4
v5 <- age + 5
v6 <- age + 6
vct.result <- c(v1, v2, v3, v4, v5, v6)
#cat(vct.result)
mat.result <- matrix(vct.result, nrow = 6)
return(mat.result)
}
vct.names <- c("mark", "yukari", "ben")
vct.ages <- c(49, 45, 47)
df.polygons <- data.frame(name = vct.names, age = vct.ages)
df.polygons
testVariable <- rep(seq_len(nrow(df.polygons)), each=6)
testVariable
testVariable <- rep(seq_len(nrow(df.polygons)), each=6)
tmp.row <- rep(1: nrow(df.data), each = 6)
tmp.row
tmp.row <- rep(1: nrow(df.data), each = 6)
df.multi <- df.data[tmp.row, ]
df.multi
df.final <- cbind(df.mult, matResult)
df.final <- cbind(df.multi, matResult)
df.final
df.data$name
ids <- df.data$name
rep(ids, each = 6)
rep(ids, each = 6)
rep(1:6, each = 6)
rep(1:6, 6)
?rep
rep(1:6, time = 6)
repIds <- rep(ids, each = 6)
vxtNum <- rep(1:6, time = 6)
paste0(repids, "_", vxtNum)
repIds <- rep(ids, each = 6)
vxtNum <- rep(1:6, time = 6)
paste0(repIds, "_", vxtNum)
repIds <- rep(ids, each = 6)
vxtNum <- rep(1:6, time = 6)
rNames <- paste0(repIds, "_", vxtNum)
row.names(df.final) <- rNames
nrow(df.final)
length(rNames)
repIds
length(repIds)
length(vxtNum)
repIds <- rep(ids, each = 6)
vxtNum <- rep(1:6, time = nrow(df.data))
rNames <- paste0(repIds, "_", vxtNum)
row.names(df.final) <- rNames
df.final
vct.names <- c("a", "b")
vct.x <- c(10, 20)
vct.y <- c(100, 200)
fnVector <- function(x) {
y <- rbind(x+1, x+2, x+3)
return(y)
}
df.output <- data.frame(apply(df.data[, c("x", "y")], 2, function(x) fnVector(x)))
vct.names <- c("a", "b")
vct.x <- c(10, 20)
vct.y <- c(100, 200)
df.data <- data.frame(name = vct.names, x = vct.x, y = vct.y)
fnVector <- function(x) {
y <- rbind(x+1, x+2, x+3)
return(y)
}
df.output <- data.frame(apply(df.data[, c("x", "y")], 2, function(x) fnVector(x)))
df.output
datSub <- df.data[, c("x", "y")]
datSub
apply(datSub, 2, sum)
install.packages("treemap")
data(GNI2010)
library(treemap)
data(GNI2010)
str(GNI2010)
nrow(GNI2010)
treemap(GNI2010,
index=c("continent", "iso3"),
vSize="population",
vColor="GNI",
type="value")
GNI2010$continent
unique(GNI2010$continent)
data(business)
head(business)
names(business)
nrow(business)
treemap(business,
index=c("NACE1", "NACE2", "NACE3"),
vSize="turnover",
type="index")
unique(business$NACE1)
bus1 <- business[business$NACE1=="C - Manufacturing",]
bus1[1:10, 1:5]
bus1[1:10, 1:2]
unCol <- unique(bus1[, c("NACE2", "NACE3")])
unCol
nrow(unCol)
ncol(unCol)
unCol
length(unique(bus1$NACE2))
length(unique(bus1$NACE3))
24 * 95
treemap(bus1,
index=c("NACE2", "NACE3"),
vSize=c("employees"),
type="index")
unColbus <- unique(bus1[, c("NACE1", "NACE2")])
unColbus
length(unColbus)
nrow(unColbus)
length(unique(business$NACE1))
length(unique(business$NACE2))
treemap(business,
index=c("NACE1", "NACE2"),
vSize="employees",
title.legend="number of NACE4 categories",
type="value")
unColbus <- unique(business[, c("NACE1", "NACE2")])
nrow(unColbus)
print("hi there")
