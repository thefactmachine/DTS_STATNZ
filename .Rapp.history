A <- 1:30
A
A * 2
1:14
1:9
1:9 *2
a<- 1:9 *2
sum(a)
1:9
(1:9)*5
1:500
1:-670
seq(1, 5, 0.5)
1:23 ^ 3
(1:23) ^ 3
a <- (1:23) ^ 3
a
a *2
a{2}
a[3]
x <- c(“a”, “b”, “c”, “d”)for (I in seq_along(x)) {	Print(x[i])}
x <- c(“a”, “b”, “c”, “d”)
x <- c('a', 'b', 'c', 'd')
for (I in seq_along(x)) {	Print(x[i])}
for (I in seq_along(x)) {	print(x[i])}
for (i in seq_along(x)) {	print(x[i])}
library('ggplot2')
1:89
bevs <- data.frame(cbind(name = c("Bill", "Llib"), drink = c("coffee", "tea", "cocoa", "water"), cost = seq(1:8)))
bevs
bevs$cost <- as.integer(bevs$cost)
aggregate(cost ~ name + drink, data = bevs, sum)
aggregate(cost ~ name + drink, data = bevs, mean)
library(gbm)
1:8
1:8*2
require('magrittr')
dev.off()
?dev.off
library(reshape2)
library(gridExtra)
knitr
library(knitr)
library(shinyapps)
library(shiny)
library(dplyr)
library(tidyr)
library(stringr)
x = c(12,34,23,11,34,45,12,11)
length(x)
diff(x,2)
length(diff(x,2))
1:34
15 * 30
230 * 30
2500 * 2.19
2500 * 2.19 / 4.3
140 * 8
42 + 30.5 + 40.5 + 35
148 + 40
188 * 110
1200 * 1.1
1200 * (183/155)
print("hi there")
# this is a comment
dd
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE)
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE)
head(df_purpose_lu)
head(df_purpose_lu)
head(df_purpose_lu,30)
str(df_purpose_lu)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE)
names(df_purpose_lu)
df_purpose_lu %>% rename_("purpose" = "Trip.Purpose.Description")
df_purpose_lu %>% rename_("Purpose" = "Trip.Purpose.Description", "Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>% select(Purpose, Group_Purpose)
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(Purpose, Group_Purpose)
df_purpose_lu
head(df_trips)
un_purpose <- df_trips$POV
un_purpose <- unique(df_trips$POV)
un_purpose
df_purpose_lu
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(Purpose, Group_Purpose)#
#PLAN OF ATTACK#
# get lookups POV to match#
# reconcile to report#
# smoothed weight is the one#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"
un_purpose <- unique(df_trips$POV)
un_purpose
df_purpose_lu
anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV"))
un_purpose <- unique(df_trips$POV)#
un_purpose
# (1) LOAD data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(Purpose, Group_Purpose)#
#PLAN OF ATTACK#
# get lookups POV to match#
# reconcile to report#
# smoothed weight is the one#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"		#
un_purpose <- unique(df_trips$POV)#
un_purpose#
#
anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV"))
# (1) LOAD data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(Purpose, Group_Purpose)#
#PLAN OF ATTACK#
# get lookups POV to match#
# reconcile to report#
# smoothed weight is the one#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
#
df_trips[df_trips$POV == "Attending Wedding/Family Occasion/Funeral"  , "POV"] #
		<- "Attending wedding/Family Occasion/Funerals"#
#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
#
df_trips[df_trips$POV == "Participation in Professional Sports Activities"  , "POV"] #
		<- "Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"		#
un_purpose <- unique(df_trips$POV)#
un_purpose#
#
anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV"))
# (1) LOAD data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(Purpose, Group_Purpose)#
#PLAN OF ATTACK#
# get lookups POV to match#
# reconcile to report#
# smoothed weight is the one#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending Wedding/Family Occasion/Funeral"  , "POV"]  <- "Attending wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participation in Professional Sports Activities"  , "POV"]  <- "Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"		#
un_purpose <- unique(df_trips$POV)#
un_purpose#
#
anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV"))
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(Purpose, Group_Purpose)#
un_purpose <- unique(df_trips$POV)#
un_purpose
df_purpose_lu
# (1) LOAD data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(Purpose, Group_Purpose)#
#PLAN OF ATTACK#
# get lookups POV to match#
# reconcile to report#
# smoothed weight is the one#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending Wedding/Family Occasion/Funeral"  , "POV"]  <- "Attending wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participating in sports activity"  , "POV"]  <- "Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"		#
un_purpose <- unique(df_trips$POV)#
un_purpose#
#
anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV"))
df_purpose_lu
# (1) LOAD data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(Purpose, Group_Purpose)#
#PLAN OF ATTACK#
# get lookups POV to match#
# reconcile to report#
# smoothed weight is the one#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending wedding/Family Occasion/Funeral"  , "POV"]  <- "Attending Wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participating in sports activity"  , "POV"]  <- "Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"		#
un_purpose <- unique(df_trips$POV)#
un_purpose#
#
anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV"))
str(df_trips)
nrow(anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV")))
nrow(anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV"))) == 0
stopifnot(nrow(anti_join(df_purpose_lu, df_trips, by = c("Purpose" = "POV"))) == 0)
aa<- df_trips %>% #
	select(TripYear, TripQtr, TripType, SmoothedTripWeight, DestinationRTO) %>%#
	inner_join(df_purpose_lu,  by = c("POV" = "POV"))
head(df_purpose_lu)
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("Purpose" = "Trip.Purpose.Description", #
		"Group_Purpose" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)
aa<- df_trips %>% #
	select(TripYear, TripQtr, TripType, SmoothedTripWeight, DestinationRTO) %>%#
	inner_join(df_purpose_lu,  by = c("POV" = "POV"))
df_purpose_lu
str(df_purpose_lu)
str(df_trips)
aa<- df_trips %>% #
	select(TripYear, TripQtr, TripType, SmoothedTripWeight, DestinationRTO) %>%#
	inner_join(df_purpose_lu,  by = c("POV" = "POV"))
# (1) LOAD data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#df_accomodation <- read.csv("data/vw_DTSVisitAccommodation.csv", header = TRUE)#
#
# read and clean#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
#PLAN OF ATTACK#
# get lookups POV to match#
# reconcile to report#
# smoothed weight is the one#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"#
#
# the following aligns the purpose of visit (POV) values in df_trips to df_purpose_lu#
# this is required to join the two tables#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending wedding/Family Occasion/Funeral"  , "POV"]  <- "Attending Wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participating in sports activity"  , "POV"]  <- "Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
# ASSERT: df_purpose_lu$POV are all contained in df_trips$POV#
stopifnot(nrow(anti_join(df_purpose_lu, df_trips, by = c("POV" = "POV"))) == 0)#
#
# Select relevant columns in df_trips and include df_purpose_lu$POV_Group
aa<- df_trips %>% #
	select(TripYear, TripQtr, TripType, SmoothedTripWeight, DestinationRTO) %>%#
	inner_join(df_purpose_lu,  by = c("POV" = "POV"))
aa<- df_trips %>% #
	select(TripYear, TripQtr, TripType, SmoothedTripWeight, DestinationRTO)
head(aa)
aa<- df_trips %>% #
	select(TripYear, TripQtr, TripType, SmoothedTripWeight, DestinationRTO, POV) %>%#
	inner_join(df_purpose_lu,  by = c("POV" = "POV"))
head(aa)
nrow(df_trips)
nrow(aa)
df_trips <- df_trips %>% #
			select(TripYear, TripQtr, TripType, SmoothedTripWeight, DestinationRTO, POV) %>%#
			inner_join(df_purpose_lu,  by = c("POV" = "POV"))
df_trips %>% filter(TripYear == 2010 & TripQtr = 3)
df_trips %>% filter(TripYear == 2010 & TripQtr == 3)
unique(df_trips$TripType)
head(df_trips)
df_trips %>% filter(TripYear == 2010 & TripQtr == 3) % group_by(TripType, POV_Group) %>% summarise(total = sum(SmoothedTripWeight))
df_trips %>% filter(TripYear == 2010 & TripQtr == 3) %>% group_by(TripType, POV_Group) %>% summarise(total = sum(SmoothedTripWeight))
df_trips %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
	group_by(TripType, POV_Group) %>% #
	summarise(total = sum(SmoothedTripWeight)) %>% #
	mutate(total = round(total,0))
?formatC
fc <- formatC(1.234 * 10^(0:8), format="fg", big.mark = ",")
fc
df_trips %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
	group_by(TripType, POV_Group) %>% #
	summarise(total = sum(SmoothedTripWeight)) %>% #
	mutate(total = round(total,0))
aa <- df_trips %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
	group_by(TripType, POV_Group) %>% #
	summarise(total = sum(SmoothedTripWeight)) %>% #
	mutate(total = round(total,0))
aa
formatC(aa$total,  format="fg", big.mark = ",")
df_trips %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
	group_by(TripType, POV_Group) %>% #
	summarise(total = sum(SmoothedTripWeight)) %>% #
	mutate(total = formatC(round(total,0), format="fg", big.mark = ","))
nrow(df_trips)
unique(df_trips$TripType)
length(df_trips$TripType == "Overnight Trip" )
fn_create_year_end
df_trips <- fn_create_year_end(df_trips)
head(df_trips)
df_YE_Mar <- df_trips  %>% select(TripQtr, YEMar) %>% distinct() %>% rename(YE = YEMar)#
df_YE_Jun <- df_trips  %>% select(TripQtr, YEJun) %>% distinct() %>% rename(YE = YEJun)#
df_YE_Sep <- df_trips  %>% select(TripQtr, YESep) %>% distinct() %>% rename(YE = YESep)#
df_YE_Dec <- df_trips  %>% select(TripQtr, YEDec) %>% distinct() %>% rename(YE = YEDec)
nrow(df_trips)
head(df_YE_Mar)
# (3.2) stack the four data frames; include whole year values; select a single column#
df_YE_all <- bind_rows(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec) %>%#
			group_by(YE) %>% summarise(count = n()) %>% #
			filter(count == 4) %>% select(YE)
head(df_YE_all)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"#
#
# the following aligns the purpose of visit (POV) values in df_trips to df_purpose_lu#
# this is required to join the two tables#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending wedding/Family Occasion/Funeral"  , "POV"]  <- "Attending Wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participating in sports activity"  , "POV"]  <- "Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
# ASSERT: df_purpose_lu$POV are all contained in df_trips$POV#
stopifnot(nrow(anti_join(df_purpose_lu, df_trips, by = c("POV" = "POV"))) == 0)#
#
# Select relevant columns in df_trips and include df_purpose_lu$POV_Group#
df_trips <- df_trips %>% #
			select(TripYear, TripQtr, TripType, SmoothedTripWeight, DestinationRTO, POV) %>%#
			inner_join(df_purpose_lu,  by = c("POV" = "POV"))#
# RECONCILIATION POINT. The following code snippet should reconcile to #
# # P:\OTSP\SAS\DTS\Output\2010Q3\reports\Est_Qtr_Trip_Type_Purpose.xls#
# df_trips %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
#	group_by(TripType, POV_Group) %>% #
#	summarise(total = sum(SmoothedTripWeight)) %>% #
#	mutate(total = formatC(round(total,0), format="fg", big.mark = ","))#
#
#=============================================================================#
# (3) CREATE a data frame of complete years. #
# add 4 extra columns: (YEMar, YEJun, YESep, YEDec) These will be used in group by calculations #
df_trips <- fn_create_year_end(df_trips)#
#
# (3.1) create four data frames with unique year ending values#
df_YE_Mar <- df_trips  %>% select(TripQtr, YEMar) %>% distinct() %>% rename(YE = YEMar)#
df_YE_Jun <- df_trips  %>% select(TripQtr, YEJun) %>% distinct() %>% rename(YE = YEJun)#
df_YE_Sep <- df_trips  %>% select(TripQtr, YESep) %>% distinct() %>% rename(YE = YESep)#
df_YE_Dec <- df_trips  %>% select(TripQtr, YEDec) %>% distinct() %>% rename(YE = YEDec)#
# (3.2) stack the four data frames; include whole year values; select a single column#
# df_YE_all contains a list of quarterly year ends for "complete" years. These are#
# years which contain 4 quarters.#
df_YE_all <- bind_rows(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec) %>%#
			group_by(YE) %>% summarise(count = n()) %>% #
			filter(count == 4) %>% select(YE)
ls()
# clean up			#
rm(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec)
ls()
head(df_trips)
df_trips_qtrly <- df_trips %>% #
	mutate(Total_Respondents = 1) %>%#
	rename(Total_Visitors = RespondentWeight, Total_Trips = SmoothedTripWeight, #
		Destination_RTO = DestinationRTO, Trip_Type = TripType)  %>%#
	select(YEDec, YESep, YEJun, YEMar, Destination_RTO, Trip_Type, POV, POV_Group,#
		Total_Visitors, Total_Trips, Total_Respondents) %>%#
	group_by(YEDec, YESep, YEJun, YEMar, Destination_RTO, Trip_Type, POV, POV_Group) %>%#
	summarise(Total_Visitors = sum(Total_Visitors), Total_Trips = sum(Total_Trips), #
		Total_Respondents = sum(Total_Respondents)
)
df_trips_qtrly <- df_trips %>% #
	mutate(Total_Respondents = 1) %>%#
	rename(Total_Visitors = RespondentWeight, Total_Trips = SmoothedTripWeight, #
		Destination_RTO = DestinationRTO, Trip_Type = TripType)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"#
#
# the following aligns the purpose of visit (POV) values in df_trips to df_purpose_lu#
# this is required to join the two tables#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending wedding/Family Occasion/Funeral"  , "POV"]  <- "Attending Wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participating in sports activity"  , "POV"]  <- "Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
# ASSERT: df_purpose_lu$POV are all contained in df_trips$POV#
stopifnot(nrow(anti_join(df_purpose_lu, df_trips, by = c("POV" = "POV"))) == 0)
head(df_trips)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/Purpose.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# clean up some columns#
df_trips[is.na(df_trips$SmoothedTripWeight), "SmoothedTripWeight"] <- 0#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"#
#
# the following aligns the purpose of visit (POV) values in df_trips to df_purpose_lu#
# this is required to join the two tables#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending wedding/Family Occasion/Funeral"  , "POV"]  <- "Attending Wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participating in sports activity"  , "POV"]  <- "Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
# ASSERT: df_purpose_lu$POV are all contained in df_trips$POV#
stopifnot(nrow(anti_join(df_purpose_lu, df_trips, by = c("POV" = "POV"))) == 0)#
# Select relevant columns in df_trips and include df_purpose_lu$POV_Group#
df_trips <- df_trips %>% #
			select(TripYear, TripQtr, TripType, SmoothedTripWeight, #
				DestinationRTO, POV, RespondentWeight) %>%#
			inner_join(df_purpose_lu,  by = c("POV" = "POV"))
df_trips <- fn_create_year_end(df_trips)#
#
# (3.1) create four data frames with unique year ending values#
df_YE_Mar <- df_trips  %>% select(TripQtr, YEMar) %>% distinct() %>% rename(YE = YEMar)#
df_YE_Jun <- df_trips  %>% select(TripQtr, YEJun) %>% distinct() %>% rename(YE = YEJun)#
df_YE_Sep <- df_trips  %>% select(TripQtr, YESep) %>% distinct() %>% rename(YE = YESep)#
df_YE_Dec <- df_trips  %>% select(TripQtr, YEDec) %>% distinct() %>% rename(YE = YEDec)#
# (3.2) stack the four data frames; include whole year values; select a single column#
# df_YE_all contains a list of quarterly year ends for "complete" years. These are#
# years which contain 4 quarters.#
df_YE_all <- bind_rows(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec) %>%#
			group_by(YE) %>% summarise(count = n()) %>% #
			filter(count == 4) %>% select(YE)#
# clean up			#
rm(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec)
df_trips_qtrly <- df_trips %>% #
	mutate(Total_Respondents = 1) %>%#
	rename(Total_Visitors = RespondentWeight, Total_Trips = SmoothedTripWeight, #
		Destination_RTO = DestinationRTO, Trip_Type = TripType)  %>%#
	select(YEDec, YESep, YEJun, YEMar, Destination_RTO, Trip_Type, POV, POV_Group,#
		Total_Visitors, Total_Trips, Total_Respondents) %>%#
	group_by(YEDec, YESep, YEJun, YEMar, Destination_RTO, Trip_Type, POV, POV_Group) %>%#
	summarise(Total_Visitors = sum(Total_Visitors), Total_Trips = sum(Total_Trips), #
		Total_Respondents = sum(Total_Respondents))
head(df_trips_qtrly)
head(df_trips_qtrly)
nrow(df_trips)
nrow(df_trips_qtrly)
YE <- c(df_trips_qtrly$YEDec, df_trips_qtrly$YESep, df_trips_qtrly$YEJun, df_trips_qtrly$YEMar)#
#
# (5.2) duplicate the same dataframe four times and stack on top of each other#
df_four_quarters <- rbind(f_trips_qtrly, f_trips_qtrly, f_trips_qtrly, f_trips_qtrly)
YE <- c(df_trips_qtrly$YEDec, df_trips_qtrly$YESep, df_trips_qtrly$YEJun, df_trips_qtrly$YEMar)#
#
# (5.2) duplicate the same dataframe four times and stack on top of each other#
df_four_quarters <- rbind(df_trips_qtrly, df_trips_qtrly, df_trips_qtrly, df_trips_qtrly)
head(df_four_quarters)
head(df_trips_qtrly)
head(df_trips_qtrly)
df_base_aggregates <- cbind(YE, df_four_quarters) %>%#
	select(-c(YEDec, YESep, YEJun, YEMar))  %>%#
	group_by(YE, Destination_RTO, Trip_Type, POV, POV_Group) %>%#
	summarise(Total_Visitors = sum(Total_Visitors), Total_Trips = sum(Total_Trips),#
			Total_Respondents = sum(Total_Respondents))
df_base_aggregates <- cbind(YE, df_four_quarters) %>%#
	select(-c(YEDec, YESep, YEJun, YEMar))  %>%#
	group_by(YE, Destination_RTO, Trip_Type, POV, POV_Group) %>%#
	summarise(Total_Visitors = sum(Total_Visitors), Total_Trips = sum(Total_Trips),#
			Total_Respondents = sum(Total_Respondents))  %>%  #
	filter(YE %in% df_YE_all$YE)
df_base_aggregates
nrow(df_base_aggregates)
df_base_aggregates %>% ungroup() %>% filter(YE == "YESep2010") %>% summarise(trips = sum(Total_Trips))
df_base_aggregates %>% ungroup() %>% filter(YE == "YESep2010") %>% #
	group_by(Trip_Type) %>% summarise(trips = sum(Total_Trips))
df_base_aggregates %>% ungroup() %>% filter(YE == "YESep2010") %>% #
	group_by(Trip_Type) %>% summarise(trips = sum(Total_Trips)) %>%#
	mutate(trips = formatC(round(trips,0), format="fg", big.mark = ","))
df_base_aggregates %>% ungroup() %>% filter(YE == "YESep2010") %>% #
	group_by(Trip_Type) %>% summarise(trips = sum(round(Total_Trips,0))) %>%#
	mutate(trips = formatC(trips, format="fg", big.mark = ","))
df_base_aggregates %>% ungroup() %>% filter(YE == "YESep2010") %>% #
	group_by(Trip_Type) %>% summarise(trips = sum(Total_Trips)) %>%#
	mutate(trips = formatC(round(trips,0), format="fg", big.mark = ","))
27491016 + 15981538
