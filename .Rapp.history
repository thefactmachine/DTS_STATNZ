library(dplyr)
library(tidyr)
library(stringr)
x = c(12,34,23,11,34,45,12,11)
length(x)
diff(x,2)
length(diff(x,2))
1:34
15 * 30
230 * 30
2500 * 2.19
2500 * 2.19 / 4.3
140 * 8
42 + 30.5 + 40.5 + 35
148 + 40
188 * 110
1200 * 1.1
1200 * (183/155)
print("hi there")
# this is a comment
dd
1 - 0.16
0.68 /2
(0.68 /2) 0.5
(0.68 /2)  0.5
(0.68 /2) + 0.5
?rnorm
salaries <- rnorm(100, mean = 50000, sd = 10000)
median(salaries)
salaries <- rnorm(100, mean = 50000, sd = 10000)
salaries <- sort(salaries)
salaries
salaries[100] <- 1000000
median(salaries)
mean(salaries)
5601.92 + 244.96
19 * 8 * 110
l <- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)
l
runif(sample(1:10, 1))
out <- vector("list", length(l))
out
seq_along(1)
l <- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)#
#length(l) is 20#
# create a blank list of 20 elements#
out <- vector("list", length(l))#
# seq_along(20) is 1 .. 20
seq_along(l)
seq_len(l)
seq_len(10)
for (i in seq_along(l)) {#
  out[[i]] <- length(l[[i]])#
}
out
# now with lapply  apply length to each element of the list#
aa <- lapply(l, length)
aa
out
aa
unlist(lapply(mtcars, class))
mtcars[] <- lapply(mtcars, function(x) x / mean(x))
mtcars
rm(list = ls())#
#
l <- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)#
#length(l) is 20#
# create a blank list of 20 elements#
out <- vector("list", length(l))#
# seq_along(20) is 1 .. 20#
#
for (i in seq_along(l)) {#
  out[[i]] <- length(l[[i]])#
}#
# out is a list of length 20 ... each element is the length of l#
# now with lapply  apply length to each element of the list#
aa <- lapply(l, length)#
# and now as a data.frame is a list apply to each eleent (ie column)#
# get the class of each column#
unlist(lapply(mtcars, class))#
#
# Divide each column by the mean#
mtcars_new[] <- lapply(mtcars, function(x) x / mean(x))
# Divide each column by the mean#
mtcars_new <- lapply(mtcars, function(x) x / mean(x))
mtcars_new
mtcars_new <- unlist(lapply(mtcars, function(x) x / mean(x)))
mtcars_new
mtcars_new <- data.frame((lapply(mtcars, function(x) x / mean(x))))
mtcars_new
x <- rcauchy(1000)
x
?trim
unlist(lapply(trims, function(trim) mean(x, trim = trim)))
unlist(lapply(rcauchy(1000), function(trim) mean(x, trim = trim)))
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE)
dir()
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE)
nrow(df_activities)
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)
nrow(df_trips)
str(df_trips)
options(stringsAsFactors = FALSE)
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE)
str(df_trips)
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, POV)
head(df_trips)
head(df_activities)
names(df_activities)
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)
head(df_activities)
unique(df_activities$Activities)
length(unique(df_activities$Activities))
nrow(df_activities)
nrow(df_trips)
head(df_trips)
head(df_activities)
aa <- inner_join(df_trips, df_activities, by = c("TripIDNumber" = "TripID"))
nrow(aa)
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)
head(df_trips)
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, SmoothedTripWeight) %>%#
		mutate(Total_Trips = SmoothedTripWeight)
head(df_trips)
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, SmoothedTripWeight) %>%#
		rename(Total_Trips = SmoothedTripWeight)
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
#
# nrow = 340,349#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)#
#
# nrow 137,081#
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, SmoothedTripWeight) %>%#
		rename(Total_Trips = SmoothedTripWeight)#
df_combined <- inner_join(df_trips, df_activities, by = c("TripIDNumber" = "TripID"))
head(df_trips)
head(df_combined)
aa <- df_combined %>% filter(TripYear == 2000 & TripQtr ==3)
nrow(aa)
bb <- df_combined %>% filter(TripYear == 2000 & TripQtr ==3) %>% select(-SurveyResponseID, -Activities) %>% distinct()
nrow(bb)
head(bb)
sum(bb$Total_Trips)
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
#
# nrow = 340,349#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)#
#
# nrow 137,081#
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, SmoothedTripWeight) %>%#
		rename(Total_Trips = SmoothedTripWeight)
head(df_trips)
2010Q3 <- df_trips %>% filter(TripYear == 2010 & TripQtr == 3)
xx <- df_trips %>% filter(TripYear == 2010 & TripQtr == 3)
nrow(xx)
sum(xx$Total_Trips)
unique(df_activities$Activities)
sort(unique(df_activities$Activities))
head(df_activities)
sort(unique(df_activities$Activities))
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)
head(df_activities)
?xlsx
library(xlsx)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
library(xlsx)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
aa <- read.xlsx('inputs/ivs_activities_classification.xlsx', 3)
aa
aa <- read.xlsx('inputs/ivs_activities_classification.xlsx', sheetIndex=3, rowIndex=2, colIndex=2)
aa <- read.xlsx('inputs/ivs_activities_classification.xlsx', sheetIndex = 3, rowIndex = 2)
aa
aa
aa <- read.xlsx('inputs/ivs_activities_classification.xlsx', sheetIndex = 3, rowIndex = 2:143)
aa
aa <- read.xlsx('inputs/ivs_activities_classification.xlsx', #
		sheetIndex = 3, rowIndex = 2:143, colIndex = 2:5)
aa
class(aa)
?for
?for
for (i in 1:nrow(df_class) {#
	print(df_class[i, 2])#
}
for (i in 1:nrow(df_class)) {#
	print(df_class[i, 2])#
}
df_class <- read.xlsx('inputs/ivs_activities_classification.xlsx', #
					sheetIndex = 3, rowIndex = 2:143, colIndex = 2:5)
for (i in 1:nrow(df_class)) {#
	print(df_class[i, 2])#
}
for (i in 1:nrow(df_class)) {#
	if (is.na(df_class[i,2])) {#
		print("this is an NA")#
	}#
}
df_class <- read.xlsx('inputs/ivs_activities_classification.xlsx', #
					sheetIndex = 3, rowIndex = 2:143, colIndex = 2:5)#
#
for (i in 1:nrow(df_class)) {#
	if (is.na(df_class[i,2])) {#
		df_class[i, 2] <- df_class[i - 1, 2]#
	}#
}
df_class
df_class[c(1,3),] <- NULL
df_class[, c(1,3)] <- NULL
df_class[, 3] <- NULL
head(df_class)
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
df_class <- read.xlsx('inputs/ivs_activities_classification.xlsx', #
					sheetIndex = 3, rowIndex = 2:143, colIndex = 2:5)#
#
for (i in 1:nrow(df_class)) {#
	if (is.na(df_class[i,2])) {#
		df_class[i, 2] <- df_class[i - 1, 2]#
	}#
}
head(df_class)
df_class[, c(1, 3), with = FALSE] <- NULL
df_class[, c(1, 3)] <- NULL
c(1, 3)
df_class[, c(1, 3)]
df_class <- read.xlsx('inputs/ivs_activities_classification.xlsx', #
					sheetIndex = 3, rowIndex = 2:143, colIndex = 2:5)#
#
for (i in 1:nrow(df_class)) {#
	if (is.na(df_class[i,2])) {#
		df_class[i, 2] <- df_class[i - 1, 2]#
	}#
}#
#
# drop the first and third columsn, these are codes#
df_class <- df_class[, -c(1, 3)]
head(df_class)
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
df_class <- read.xlsx('inputs/ivs_activities_classification.xlsx', #
					sheetIndex = 3, rowIndex = 2:143, colIndex = 2:5)#
#
for (i in 1:nrow(df_class)) {#
	if (is.na(df_class[i,2])) {#
		df_class[i, 2] <- df_class[i - 1, 2]#
	}#
}#
#
# drop the first and third columsn, these are codes#
df_class <- df_class[, -c(1, 3)]#
#
names(df_class) <- c("Activity_Group", "Activity")
head(df_class)
head(df_class, 20)
# nrow = 340,349#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)
un_activity <- unique(df_activities$Activities)
un_activity
un_activity <- unique(df_activities$Activities)
df_class
nrow(df_class)
length(unique(df_class$Activity))
df_class %>% filter(Activity %in% un_activity)
vct_activity <- unique(df_activities$Activities)
df_class %>% filter(Activity %in% vct_activity)
df_class %>% filter(!Activity %in% vct_activity)
vct_activity
sort(vct_activity)
df_class %>% filter(!Activity %in% vct_activity)
vct_activity[!vct_activity %in% df_class$Activity]
df_class[df_class$Activity == "Walk in City", "Activity"] <- "Walk In City"#
# show df_class that it is not in vct_activity#
df_class %>% filter(!Activity %in% vct_activity)#
#
# show the oposite#
vct_activity[!vct_activity %in% df_class$Activity]
# nrow = 340,349#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)#
df_activities[df_activities$Activities == "Business   " ,  "Activities"] <- "Business"#
vct_activity <- unique(df_activities$Activities)#
df_class[df_class$Activity == "Walk in City", "Activity"] <- "Walk In City"#
# show df_class that it is not in vct_activity#
df_class %>% filter(!Activity %in% vct_activity)#
#
# show the oposite#
vct_activity[!vct_activity %in% df_class$Activity]#
sort(vct_activity)
# show df_class that it is not in vct_activity#
df_class %>% filter(!Activity %in% vct_activity)#
#
# show the oposite#
vct_activity[!vct_activity %in% df_class$Activity]
df_class[df_class$Activity == "Walk in City", "Activity"] <- "Walk In City"#
df_class[df_class$Activity == "Refused To Answer", "Activity"] <- "Refused to Answer"#
df_class[df_class$Activity == "Scenic Flight (heli, plane)", "Activity"] <- "Scenic Flight (Heli, Plane)"#
df_class[df_class$Activity == "Cycling (on-road)", "Activity"] <- "Cycling (On-road)"#
df_class[df_class$Activity == "Arts and Crafts", "Activity"] <- "Arts And Crafts"
# show df_class that it is not in vct_activity#
df_class %>% filter(!Activity %in% vct_activity)#
#
# show the oposite#
vct_activity[!vct_activity %in% df_class$Activity]
df_class[df_class$Activity == "Mountain Biking (off-road)", "Activity"]  <-#
"Mountain Biking (Off-road)" #
#
df_class[df_class$Activity == "Zoos/Wildlife/Marine Parks (e.g. Kelly Tarltons, Orana Park,", "Activity"] <-#
"Zoos/Wildlife/Marine Parks (e.g. Kelly Tarltons, Orana Park, Wellington Zoo)"#
#
df_class[df_class$Activity == "Personal Business (incl. family help/financial/househunting)" , "Activity"] <-#
"Personal Business (incl. family help/financial/house hunting)"#
#
df_class[df_class$Activity == "Dont Know" , "Activity"] <- "Dont know"
# show df_class that it is not in vct_activity#
df_class %>% filter(!Activity %in% vct_activity)#
#
# show the oposite#
vct_activity[!vct_activity %in% df_class$Activity]
source('functions/fn_get_classification.R')
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# this is a collection of statements that changes a few values so it can join with "df_purpose_lu"#
source('functions/fn_clean_trips.R')#
# this function cleans up "vw_DTSTripSpend.csv" It removes "alcohol" from "Food and Alcohol"#
source('functions/fn_clean_spend.R')#
source('functions/fn_get_classification.R')
aa <- fn_get_classification()
aa
remove.packages(xlsx)
remove.packages('xlsx')
# nrow = 340,349#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)#
df_activities[df_activities$Activities == "Business   " ,  "Activities"] <- "Business"
head(df_activities)
df_activity_classification <- fn_get_classification()
head(df_activity_classification)
aa <- df_activities %>% inner_join(df_activity_classification, by = c("Activities" = "Activity"))
head(aa)
nrow(aa)
df_activities <- df_activities %>% #
 			inner_join(df_activity_classification, by = c("Activities" = "Activity")) %>%#
 			select(TripID, Activity_Group, Activities)
head(df_activities)
head(df_trips)
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)
head(df_trips)
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# nrow 137,081#
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, SmoothedTripWeight) %>%#
		rename(Total_Trips = SmoothedTripWeight)
head(df_trips)
df_combined <- inner_join(df_trips, df_activities, by = c("TripIDNumber" = "TripID"))
head(df_combined)
nrow(df_combined)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# this is a collection of statements that changes a few values so it can join with "df_purpose_lu"#
source('functions/fn_clean_trips.R')#
# this function cleans up "vw_DTSTripSpend.csv" It removes "alcohol" from "Food and Alcohol"#
source('functions/fn_clean_spend.R')#
# loads a prepares an activity classification table#
source('functions/fn_get_classification.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
#
# ==============================================================================================#
#
# (1) LOAD and Prepare data#
# 1,a TRIPS#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# nrow 137,081#
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, SmoothedTripWeight) %>%#
		rename(Total_Trips = SmoothedTripWeight)#
# 1.b ACTIVITIES#
# This function gets an XL spreasheet and cleans some values so it matches with df_activities#
df_activity_classification <- fn_get_classification()#
#
# nrow = 340,349#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)#
#
# clean up a rogue value#
df_activities[df_activities$Activities == "Business   " ,  "Activities"] <- "Business"#
#
# append activity group to df_activies#
df_activities <- df_activities %>% #
 			inner_join(df_activity_classification, by = c("Activities" = "Activity")) %>%#
 			select(TripID, Activity_Group, Activities)#
df_combined <- inner_join(df_trips, df_activities, by = c("TripIDNumber" = "TripID"))
head(df_combined)
?first
aa <-df_combined %>% group_by(TripIDNumber) %>% first(Total_Trips)
aa <-df_combined %>% group_by(TripIDNumber) %>% first(Total_Trips)
aa <-df_combined %>% filter(TripYear == 2010 & TripQtr == 3) %>% distinct(TripIDNumber, Total_Trips)
head(aa)
sum(aa$Total_Trips)
aa <-df_combined %>% filter(TripYear == 2010 & TripQtr == 3) %>% distinct(TripIDNumber)
sum(aa$Total_Trips)
aa
sum(aa$Total_Trips)
key <- c('A', "A", "A", "B", "B", "C")#
amount <- c(20, 20, 20, 10, 10, 15)#
place <- c("FIN", "FIN", "FIN", "NZ", "NZ", "AUS")#
#
df_test <- data.frame(key, amount, place)
df_test
key <- c('A', "A", "A", "B", "B", "C")#
amount <- c(20, 20, 20, 10, 10, 15)#
place <- c("FIN", "CHF", "ENG", "NZ", "CAN", "AUS")#
#
df_test <- data.frame(key, amount, place)
df_test
df_test %>% distinct(key)
head(df_combined)
df_combined %>% #
		filter(TripYear == 2010, TripQtr = 3) %>% #
		distinct(TripIDNumber) %>% summarise(total = sum(Total_Trips))
df_combined %>% filter(TripYear == 2010 & TripQtr = 3) %>% #
		distinct(TripIDNumber) %>% summarise(total = sum(Total_Trips))
df_combined %>% filter(TripYear == 2010 & TripQtr = 3) %>% #
		distinct(TripIDNumber) %>% summarise(total = sum(Total_Trips))
aa <- df_combined %>% filter(TripYear == 2010 & TripQtr = 3)
aa <- df_combined %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
		distinct(TripIDNumber) %>% summarise(total = sum(Total_Trips))
aa
df_rec <- df_combined %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
			distinct(TripIDNumber) %>% summarise(total = sum(Total_Trips))
class(df_rec)
as.integer(df_rec$total)
as.integer(df_rec$total) == 8465427
s.integer(df_rec$total)
as.integer(df_rec$total)
round(df_rec$total, 0)
round(df_rec$total, 0) == 8465427
stopifnot(round(df_rec$total, 0) == 8465427)
df_rec <- df_combined %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
			distinct(TripIDNumber) %>% summarise(total = sum(Total_Trips))#
#
stopifnot(round(df_rec$total, 0) == 8465427)#
rm(df_rec)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# this is a collection of statements that changes a few values so it can join with "df_purpose_lu"#
source('functions/fn_clean_trips.R')#
# this function cleans up "vw_DTSTripSpend.csv" It removes "alcohol" from "Food and Alcohol"#
source('functions/fn_clean_spend.R')#
# loads a prepares an activity classification table#
source('functions/fn_get_classification.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
#========================================================================#
# (1) LOAD and Prepare data#
# 1,a TRIPS#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# nrow 137,081#
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, SmoothedTripWeight) %>%#
		rename(Total_Trips = SmoothedTripWeight)#
# 1.b ACTIVITIES#
# This function gets an XL spreasheet and cleans some values so it matches with df_activities#
df_activity_classification <- fn_get_classification()#
#
# nrow = 340,349#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)#
#
# clean up a rogue value#
df_activities[df_activities$Activities == "Business   " ,  "Activities"] <- "Business"#
#
# append activity group to df_activies#
df_activities <- df_activities %>% #
 			inner_join(df_activity_classification, by = c("Activities" = "Activity")) %>%#
 			select(TripID, Activity_Group, Activities)#
df_combined <- inner_join(df_trips, df_activities, by = c("TripIDNumber" = "TripID"))#
#
#========================================================================#
#
#========================================================================#
# RECONCILIATION POINT. The following code snippet should reconcile to #
# P:\OTSP\SAS\DTS\Output\2010Q3\reports\Est_Qtr_Trip_Type_Purpose.xls #
# The number of trips is 8,465,427#
#
df_rec <- df_combined %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
			distinct(TripIDNumber) %>% summarise(total = sum(Total_Trips))#
#
stopifnot(round(df_rec$total, 0) == 8465427)#
rm(df_rec)#
#
#========================================================================#
#=============================================================================#
# (2) CREATE a data frame of complete years. #
# add 4 extra columns: (YEMar, YEJun, YESep, YEDec) These will be used in group by calculations #
df_combined <- fn_create_year_end(df_combined)
df_combined
head(df_combined)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# this is a collection of statements that changes a few values so it can join with "df_purpose_lu"#
source('functions/fn_clean_trips.R')#
# this function cleans up "vw_DTSTripSpend.csv" It removes "alcohol" from "Food and Alcohol"#
source('functions/fn_clean_spend.R')#
# loads a prepares an activity classification table#
source('functions/fn_get_classification.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
#========================================================================#
# (1) LOAD and Prepare data#
# 1,a TRIPS#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# nrow 137,081#
df_trips <- df_trips %>% #
		select(TripIDNumber, TripYear, TripQtr, TripType, DestinationRTO, SmoothedTripWeight) %>%#
		rename(Total_Trips = SmoothedTripWeight)#
# 1.b ACTIVITIES#
# This function gets an XL spreasheet and cleans some values so it matches with df_activities#
df_activity_classification <- fn_get_classification()#
#
# nrow = 340,349#
df_activities <- read.csv("data/vw_DTSVisitActivities.csv", header = TRUE) %>%#
			select(-AnswerNumber, -LegNumber)#
#
# clean up a rogue value#
df_activities[df_activities$Activities == "Business   " ,  "Activities"] <- "Business"#
#
# append activity group to df_activies#
df_activities <- df_activities %>% #
 			inner_join(df_activity_classification, by = c("Activities" = "Activity")) %>%#
 			select(TripID, Activity_Group, Activities)#
df_combined <- inner_join(df_trips, df_activities, by = c("TripIDNumber" = "TripID"))#
#
#========================================================================#
#
#========================================================================#
# RECONCILIATION POINT. The following code snippet should reconcile to #
# P:\OTSP\SAS\DTS\Output\2010Q3\reports\Est_Qtr_Trip_Type_Purpose.xls #
# The number of trips is 8,465,427#
#
df_rec <- df_combined %>% filter(TripYear == 2010 & TripQtr == 3) %>% #
			distinct(TripIDNumber) %>% summarise(total = sum(Total_Trips))#
#
stopifnot(round(df_rec$total, 0) == 8465427)#
rm(df_rec)
ls()
rm(df_rec, df_activity_classification)
df_combined <- fn_create_year_end(df_combined)#
# (2.1) create four data frames with unique year ending values#
df_YE_Mar <- df_trips_combined %>% select(TripQtr, YEMar) %>% distinct() %>% rename(YE = YEMar)#
df_YE_Jun <- df_trips_combined %>% select(TripQtr, YEJun) %>% distinct() %>% rename(YE = YEJun)#
df_YE_Sep <- df_trips_combined %>% select(TripQtr, YESep) %>% distinct() %>% rename(YE = YESep)#
df_YE_Dec <- df_trips_combined %>% select(TripQtr, YEDec) %>% distinct() %>% rename(YE = YEDec)#
# (3.2) stack the four data frames; include whole year values; select a single column#
# df_YE_all contains a list of quarterly year ends for "complete" years. These are#
# years which contain 4 quarters.#
df_YE_all <- bind_rows(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec) %>%#
			group_by(YE) %>% summarise(count = n()) %>% #
			filter(count == 4) %>% select(YE)#
# clean up			#
rm(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec)#
rm(df_purpose_lu, df_spend_combined, df_trip_spend, df_trips)
df_YE_Mar <- df_combined %>% select(TripQtr, YEMar) %>% distinct() %>% rename(YE = YEMar)#
df_YE_Jun <- df_combined %>% select(TripQtr, YEJun) %>% distinct() %>% rename(YE = YEJun)#
df_YE_Sep <- df_combined %>% select(TripQtr, YESep) %>% distinct() %>% rename(YE = YESep)#
df_YE_Dec <- df_combined %>% select(TripQtr, YEDec) %>% distinct() %>% rename(YE = YEDec)
df_YE_all <- bind_rows(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec) %>%#
			group_by(YE) %>% summarise(count = n()) %>% #
			filter(count == 4) %>% select(YE)
# clean up			#
rm(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec)#
rm(df_purpose_lu, df_spend_combined, df_trip_spend, df_trips)
# (2) CREATE a data frame of complete years. #
# add 4 extra columns: (YEMar, YEJun, YESep, YEDec) These will be used in group by calculations #
df_combined <- fn_create_year_end(df_combined)#
# (2.1) create four data frames with unique year ending values#
df_YE_Mar <- df_combined %>% select(TripQtr, YEMar) %>% distinct() %>% rename(YE = YEMar)#
df_YE_Jun <- df_combined %>% select(TripQtr, YEJun) %>% distinct() %>% rename(YE = YEJun)#
df_YE_Sep <- df_combined %>% select(TripQtr, YESep) %>% distinct() %>% rename(YE = YESep)#
df_YE_Dec <- df_combined %>% select(TripQtr, YEDec) %>% distinct() %>% rename(YE = YEDec)#
# (3.2) stack the four data frames; include whole year values; select a single column#
# df_YE_all contains a list of quarterly year ends for "complete" years. These are#
# years which contain 4 quarters.#
df_YE_all <- bind_rows(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec) %>%#
			group_by(YE) %>% summarise(count = n()) %>% #
			filter(count == 4) %>% select(YE)#
# clean up			#
rm(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec)
# (2) CREATE a data frame of complete years. #
# add 4 extra columns: (YEMar, YEJun, YESep, YEDec) These will be used in group by calculations #
df_combined <- fn_create_year_end(df_combined)#
# (2.1) create four data frames with unique year ending values#
df_YE_Mar <- df_combined %>% select(TripQtr, YEMar) %>% distinct() %>% rename(YE = YEMar)#
df_YE_Jun <- df_combined %>% select(TripQtr, YEJun) %>% distinct() %>% rename(YE = YEJun)#
df_YE_Sep <- df_combined %>% select(TripQtr, YESep) %>% distinct() %>% rename(YE = YESep)#
df_YE_Dec <- df_combined %>% select(TripQtr, YEDec) %>% distinct() %>% rename(YE = YEDec)#
# (3.2) stack the four data frames; include whole year values; select a single column#
# df_YE_all contains a list of quarterly year ends for "complete" years. These are#
# years which contain 4 quarters.#
df_YE_all <- bind_rows(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec) %>%#
			group_by(YE) %>% summarise(count = n()) %>% #
			filter(count == 4) %>% select(YE)#
# clean up			#
rm(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec)
head(df_combined)
