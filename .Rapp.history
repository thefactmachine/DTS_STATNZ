?dev.off
library(reshape2)
library(gridExtra)
knitr
library(knitr)
library(shinyapps)
library(shiny)
library(dplyr)
library(tidyr)
library(stringr)
x = c(12,34,23,11,34,45,12,11)
length(x)
diff(x,2)
length(diff(x,2))
1:34
15 * 30
230 * 30
2500 * 2.19
2500 * 2.19 / 4.3
140 * 8
42 + 30.5 + 40.5 + 35
148 + 40
188 * 110
1200 * 1.1
1200 * (183/155)
print("hi there")
# this is a comment
dd
1 - 0.16
0.68 /2
(0.68 /2) 0.5
(0.68 /2)  0.5
(0.68 /2) + 0.5
?rnorm
salaries <- rnorm(100, mean = 50000, sd = 10000)
median(salaries)
salaries <- rnorm(100, mean = 50000, sd = 10000)
salaries <- sort(salaries)
salaries
salaries[100] <- 1000000
median(salaries)
mean(salaries)
5601.92 + 244.96
19 * 8 * 110
l <- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)
l
runif(sample(1:10, 1))
out <- vector("list", length(l))
out
seq_along(1)
l <- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)#
#length(l) is 20#
# create a blank list of 20 elements#
out <- vector("list", length(l))#
# seq_along(20) is 1 .. 20
seq_along(l)
seq_len(l)
seq_len(10)
for (i in seq_along(l)) {#
  out[[i]] <- length(l[[i]])#
}
out
# now with lapply  apply length to each element of the list#
aa <- lapply(l, length)
aa
out
aa
unlist(lapply(mtcars, class))
mtcars[] <- lapply(mtcars, function(x) x / mean(x))
mtcars
rm(list = ls())#
#
l <- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)#
#length(l) is 20#
# create a blank list of 20 elements#
out <- vector("list", length(l))#
# seq_along(20) is 1 .. 20#
#
for (i in seq_along(l)) {#
  out[[i]] <- length(l[[i]])#
}#
# out is a list of length 20 ... each element is the length of l#
# now with lapply  apply length to each element of the list#
aa <- lapply(l, length)#
# and now as a data.frame is a list apply to each eleent (ie column)#
# get the class of each column#
unlist(lapply(mtcars, class))#
#
# Divide each column by the mean#
mtcars_new[] <- lapply(mtcars, function(x) x / mean(x))
# Divide each column by the mean#
mtcars_new <- lapply(mtcars, function(x) x / mean(x))
mtcars_new
mtcars_new <- unlist(lapply(mtcars, function(x) x / mean(x)))
mtcars_new
mtcars_new <- data.frame((lapply(mtcars, function(x) x / mean(x))))
mtcars_new
x <- rcauchy(1000)
x
?trim
unlist(lapply(trims, function(trim) mean(x, trim = trim)))
unlist(lapply(rcauchy(1000), function(trim) mean(x, trim = trim)))
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# RELATIONSHIP BETWEEN TRIPS AND TRIP_SPEND#
# trips has 137081 rows trip_spend contains six different categories. Each of these categories#
# has 137081 rows.  The number of rows in trip_spend is 6 * 137081 = 822486#
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
#
df_trip_spend[df_trip_spend$SpendType == "Other   ", "SpendType"] <- "Other"			#
df_trips <- df_trips %>% #
			select(TripIDNumber, TripYear, TripQtr, TripType, #
				DestinationRTO, POV, ExpenditureWeight, ImputedSpendAccom, ImputedSpendTrnsport)			#
#
df_trips[is.na(df_trips$ImputedSpendAccom),"ImputedSpendAccom"] <- 0#
df_trips[is.na(df_trips$ExpenditureWeight), "ExpenditureWeight"] <- 0#
df_trips <- df_trips %>% #
			mutate(Accom_Spend = ExpenditureWeight * ImputedSpendAccom) %>%#
			mutate(Trans_Spend = ExpenditureWeight * ImputedSpendTrnsport)
# nrow() here is 822486 (6 * 137081)#
df_trip_spend_calc <- df_trips[, c("TripIDNumber", "ExpenditureWeight")] %>% #
		inner_join(df_trip_spend, by = c("TripIDNumber" = "TripID")) %>% #
		mutate(Expenditure = ExpenditureWeight * ImputedSpendAmt) %>%#
		select(TripIDNumber, SpendType, Expenditure)#
total_alcohol <- sum(df_trip_spend_calc[df_trip_spend_calc$SpendType == "Alcohol", "Expenditure"])#
sum(df_trip_spend_calc$Expenditure) - total_alcohol#
#
# remove "alcohol" from "food and alcohol" and c it "FoodAndBeverages"#
# nrows = 2 * 137081 = 274162#
df_alcohol_beverage <- df_trip_spend_calc %>% #
						filter(SpendType == "Alcohol" | SpendType == "Food And Alcohol") %>% #
						spread(SpendType, Expenditure) %>%#
						select(TripIDNumber, Alcohol, FoodAndAlcohol = one_of("Food And Alcohol")) %>%#
						mutate(FoodAndBeverages = FoodAndAlcohol - Alcohol) %>%#
						select(-FoodAndAlcohol) %>% #
						gather("SpendType", "Expenditure", 2:3)#
bb <- df_trip_spend_calc %>% #
		filter(!SpendType %in% c("Alcohol", "Food And Alcohol")) %>%#
		bind_rows(df_alcohol_beverage)
nrow(bb)
head(df_trips)
sum(df_trips[df_trips$TripType == "Overnight Trip", "Accom_Spend"])
sum(df_trips[df_trips$TripType == "Day Trip", "Accom_Spend"])
(sum(df_trips[df_trips$TripType == "Day Trip", "Accom_Spend"]) == 0)
stopifnot(sum(df_trips[df_trips$TripType == "Day Trip", "Accom_Spend"]) == 0)
head(bb)
aa <- df_trips %>% filter(TripType == "Overnight Trip") %>% select(TripIDNumber, Accomodation = Accom_Spend)
head(aa)
aa <- df_trips %>% filter(TripType == "Overnight Trip") %>% select(TripIDNumber, Expenditure = Accom_Spend) %>% mutate(SpendType = "Accomodation")
head(aa)
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend) #
		%>% mutate(SpendType = "Accomodation") %>%#
		select(TripIDNumber, SpendType, Expenditure)
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend) #
		%>% mutate(SpendType = "Accomodation") %>%#
		select(TripIDNumber, SpendType, Expenditure)
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend) #
		%>% mutate(SpendType = "Accomodation") %>%#
		select(TripIDNumber, SpendType, Expenditure)
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend) #
		%>% mutate(SpendType = "Accomodation")
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip")
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend) %>% #
		%>% mutate(SpendType = "Accomodation") %>%#
		select(TripIDNumber, SpendType, Expenditure)
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend) %>% #
		%>% mutate(SpendType = "Accomodation")
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend)
head(aa)
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend) %>% #
		mutate(SpendType = "Accomodation")
head(aa)
aa <- df_trips %>% #
		filter(TripType == "Overnight Trip") %>% #
		select(TripIDNumber, Expenditure = Accom_Spend) %>% #
		mutate(SpendType = "Accomodation") %>%#
		select(TripIDNumber, SpendType, Expenditure)
head(aa)
df_spend_accomodation <- df_trips %>% #
						filter(TripType == "Overnight Trip") %>% #
						select(TripIDNumber, Expenditure = Accom_Spend) %>% #
						mutate(SpendType = "Accomodation") %>%#
						select(TripIDNumber, SpendType, Expenditure)
nrow(df_spend_accomodation)
head(df_trips)
select(TripIDNumber, Expenditure = Trans_Spend) %>% #
						mutate(SpendType = "Transport") %>%#
						select(TripIDNumber, SpendType, Expenditure)
df_spend_transport <- df_trips %>% #
						select(TripIDNumber, Expenditure = Trans_Spend) %>% #
						mutate(SpendType = "Transport")
head(df_spend_transport)
df_spend_transport <- df_trips %>% #
						select(TripIDNumber, Expenditure = Trans_Spend) %>% #
						mutate(SpendType = "Transport") %>%#
						select(TripIDNumber, SpendType, Expenditure)
nrow(df_spend_transport)
(7 * 137,081) + (1 * 90693)
(7 * 137081) + (1 * 90693)
xx <- bind_rows(df_trip_spend_new, df_spend_accomodation, df_spend_transport)
df_trip_spend_new 	<- df_trip_spend_calc %>% #
					filter(!SpendType %in% c("Alcohol", "Food And Alcohol")) %>%#
					bind_rows(df_alcohol_beverage)#
ASSERT: There is zero accomodation spend for every "day trips"#
stopifnot(sum(df_trips[df_trips$TripType == "Day Trip", "Accom_Spend"]) == 0)#
#
# there are 90693 rows (i.e overnight trips) with accomodation expense#
df_spend_accomodation <- df_trips %>% #
						filter(TripType == "Overnight Trip") %>% #
						select(TripIDNumber, Expenditure = Accom_Spend) %>% #
						mutate(SpendType = "Accomodation") %>%#
						select(TripIDNumber, SpendType, Expenditure)#
#
# here are the full 137,081 rows for transport spend#
df_spend_transport <- df_trips %>% #
						select(TripIDNumber, Expenditure = Trans_Spend) %>% #
						mutate(SpendType = "Transport") %>%#
						select(TripIDNumber, SpendType, Expenditure)
xx <- bind_rows(df_trip_spend_new, df_spend_accomodation, df_spend_transport)
nrow(xx)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# RELATIONSHIP BETWEEN TRIPS AND TRIP_SPEND#
# trips has 137081 rows trip_spend contains six different categories. Each of these categories#
# has 137081 rows.  The number of rows in trip_spend is 6 * 137081 = 822486#
# CORRECT Some values in trips.  This will enable a subsequent joint with "df_purpose_lu"#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"#
#
# the following aligns the purpose of visit (POV) values in df_trips to df_purpose_lu#
# this is required to join the two tables#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending wedding/Family Occasion/Funeral"  , "POV"]  <- #
	"Attending Wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participating in sports activity"  , "POV"]  <- #
	"Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
df_trips[is.na(df_trips$ImputedSpendAccom),"ImputedSpendAccom"] <- 0#
df_trips[is.na(df_trips$ExpenditureWeight), "ExpenditureWeight"] <- 0#
df_trips <- df_trips %>% #
			select(TripIDNumber, TripYear, TripQtr, TripType, #
				DestinationRTO, POV, ExpenditureWeight, ImputedSpendAccom, ImputedSpendTrnsport)			#
df_trips <- df_trips %>% #
			mutate(Accom_Spend = ExpenditureWeight * ImputedSpendAccom) %>%#
			mutate(Trans_Spend = ExpenditureWeight * ImputedSpendTrnsport)
head(df_purpose_lu)
nrow(df_trips)
head(df_trips)
xx <- inner_join(df_trips, df_purpose_lu, by = c("POV" = "POV"))
head(xx)
nrow(xx)
# Time to focus on df_trip_spend#
#
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
df_trip_spend[df_trip_spend$SpendType == "Other   ", "SpendType"] <- "Other"	#
# nrow() here is 822486 (6 * 137081)#
df_trip_spend_calc <- df_trips[, c("TripIDNumber", "ExpenditureWeight")] %>% #
		inner_join(df_trip_spend, by = c("TripIDNumber" = "TripID")) %>% #
		mutate(Expenditure = ExpenditureWeight * ImputedSpendAmt) %>%#
		select(TripIDNumber, SpendType, Expenditure)#
# remove "alcohol" from "food and alcohol" and call it "FoodAndBeverages"#
# nrows = 2 * 137081 = 274162#
df_alcohol_beverage <- df_trip_spend_calc %>% #
						filter(SpendType == "Alcohol" | SpendType == "Food And Alcohol") %>% #
						spread(SpendType, Expenditure) %>%#
						select(TripIDNumber, Alcohol, FoodAndAlcohol = one_of("Food And Alcohol")) %>%#
						mutate(FoodAndBeverages = FoodAndAlcohol - Alcohol) %>%#
						select(-FoodAndAlcohol) %>% #
						gather("SpendType", "Expenditure", 2:3)#
# This is the data frame: 822486 (6 * 137081) This data frames removes the "alcohol" double counting#
# in the original data set. Format: TripIDNumber, SpendType, Expenditure#
df_trip_spend_new 	<- df_trip_spend_calc %>% #
					filter(!SpendType %in% c("Alcohol", "Food And Alcohol")) %>%#
					bind_rows(df_alcohol_beverage)#
ASSERT: There is zero accomodation spend for every "day trips"#
stopifnot(sum(df_trips[df_trips$TripType == "Day Trip", "Accom_Spend"]) == 0)#
#
# there are 90693 rows (i.e overnight trips) with accomodation expense#
df_spend_accomodation <- df_trips %>% #
						filter(TripType == "Overnight Trip") %>% #
						select(TripIDNumber, Expenditure = Accom_Spend) %>% #
						mutate(SpendType = "Accomodation") %>%#
						select(TripIDNumber, SpendType, Expenditure)#
#
# here are the full 137,081 rows for transport spend#
df_spend_transport <- df_trips %>% #
						select(TripIDNumber, Expenditure = Trans_Spend) %>% #
						mutate(SpendType = "Transport") %>%#
						select(TripIDNumber, SpendType, Expenditure)#
#
# create a consolidated trip spend: 8 variables. #
# nrows =  (7 * 137081) + (1 * 90693) = 1050260#
df_spend_combined <- bind_rows(df_trip_spend_new, df_spend_accomodation, df_spend_transport)
#========================================================================#
# Time to focus on df_trip_spend#
#
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
df_trip_spend[df_trip_spend$SpendType == "Other   ", "SpendType"] <- "Other"	#
# nrow() here is 822486 (6 * 137081)#
df_trip_spend_calc <- df_trips[, c("TripIDNumber", "ExpenditureWeight")] %>% #
		inner_join(df_trip_spend, by = c("TripIDNumber" = "TripID")) %>% #
		mutate(Expenditure = ExpenditureWeight * ImputedSpendAmt) %>%#
		select(TripIDNumber, SpendType, Expenditure)#
# remove "alcohol" from "food and alcohol" and call it "FoodAndBeverages"#
# nrows = 2 * 137081 = 274162#
df_alcohol_beverage <- df_trip_spend_calc %>% #
						filter(SpendType == "Alcohol" | SpendType == "Food And Alcohol") %>% #
						spread(SpendType, Expenditure) %>%#
						select(TripIDNumber, Alcohol, FoodAndAlcohol = one_of("Food And Alcohol")) %>%#
						mutate(FoodAndBeverages = FoodAndAlcohol - Alcohol) %>%#
						select(-FoodAndAlcohol) %>% #
						gather("SpendType", "Expenditure", 2:3)#
# This is the data frame: 822486 (6 * 137081) This data frames removes the "alcohol" double counting#
# in the original data set. Format: TripIDNumber, SpendType, Expenditure#
df_trip_spend_new 	<- df_trip_spend_calc %>% #
					filter(!SpendType %in% c("Alcohol", "Food And Alcohol")) %>%#
					bind_rows(df_alcohol_beverage)#
#ASSERT: There is zero accomodation spend for every "day trips"#
stopifnot(sum(df_trips[df_trips$TripType == "Day Trip", "Accom_Spend"]) == 0)#
#
# there are 90693 rows (i.e overnight trips) with accomodation expense#
df_spend_accomodation <- df_trips %>% #
						filter(TripType == "Overnight Trip") %>% #
						select(TripIDNumber, Expenditure = Accom_Spend) %>% #
						mutate(SpendType = "Accomodation") %>%#
						select(TripIDNumber, SpendType, Expenditure)#
#
# here are the full 137,081 rows for transport spend#
df_spend_transport <- df_trips %>% #
						select(TripIDNumber, Expenditure = Trans_Spend) %>% #
						mutate(SpendType = "Transport") %>%#
						select(TripIDNumber, SpendType, Expenditure)#
#
# create a consolidated trip spend: 8 variables. #
# nrows =  (7 * 137081) + (1 * 90693) = 1050260#
df_spend_combined <- bind_rows(df_trip_spend_new, df_spend_accomodation, df_spend_transport)
head(df_trips)
head(df_spend_combined)
xx <- df_trips %>% inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber"))
nrow(xx)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# RELATIONSHIP BETWEEN TRIPS AND TRIP_SPEND#
# trips has 137081 rows trip_spend contains six different categories. Each of these categories#
# has 137081 rows.  The number of rows in trip_spend is 6 * 137081 = 822486#
#========================================================================#
# TIDY UP df_trips Some values in trips.  This will enable a subsequent joint with "df_purpose_lu"#
df_trips[df_trips$DestinationRTO == "Other   ", "DestinationRTO"] <- "Other"#
#
# the following aligns the purpose of visit (POV) values in df_trips to df_purpose_lu#
# this is required to join the two tables#
df_trips[is.na(df_trips$POV), "POV"] <- "None"#
df_trips[df_trips$POV == "REFUSED", "POV"] <- "Refused"#
df_trips[df_trips$POV == "Business   "  , "POV"] <- "Business"#
df_trips[df_trips$POV == "Other Reason (specify)"  , "POV"] <- "Other"#
df_trips[df_trips$POV == "Education Or Study"  , "POV"] <- "Education/Study"#
df_trips[df_trips$POV == "Conference Or Convention"  , "POV"] <- "Conference or Convention"#
df_trips[df_trips$POV == "Attending wedding/Family Occasion/Funeral"  , "POV"]  <- #
							"Attending Wedding/Family Occasion/Funerals"#
df_trips[df_trips$POV == "Visiting relatives"  , "POV"] <- "Visiting Relatives"#
df_trips[df_trips$POV == "Participating in sports activity"  , "POV"]  <- #
							"Participation in Sports Activity"#
df_trips[df_trips$POV == "Publicised special event"  , "POV"] <- "Publicised Special Event"#
df_trips[is.na(df_trips$ImputedSpendAccom),"ImputedSpendAccom"] <- 0#
df_trips[is.na(df_trips$ExpenditureWeight), "ExpenditureWeight"] <- 0#
df_trips <- df_trips %>% #
			select(TripIDNumber, TripYear, TripQtr, TripType, #
				DestinationRTO, POV, ExpenditureWeight, ImputedSpendAccom, ImputedSpendTrnsport)			#
df_trips <- df_trips %>% #
			mutate(Accom_Spend = ExpenditureWeight * ImputedSpendAccom) %>%#
			mutate(Trans_Spend = ExpenditureWeight * ImputedSpendTrnsport)#
#
# add in POV_Group#
df_trips <- df_trips %>% inner_join(df_purpose_lu, by = c("POV" = "POV"))#
#========================================================================#
# Time to focus on df_trip_spend#
#
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
df_trip_spend[df_trip_spend$SpendType == "Other   ", "SpendType"] <- "Other"	#
# nrow() here is 822486 (6 * 137081)#
df_trip_spend_calc <- df_trips[, c("TripIDNumber", "ExpenditureWeight")] %>% #
		inner_join(df_trip_spend, by = c("TripIDNumber" = "TripID")) %>% #
		mutate(Expenditure = ExpenditureWeight * ImputedSpendAmt) %>%#
		select(TripIDNumber, SpendType, Expenditure)#
# remove "alcohol" from "food and alcohol" and call it "FoodAndBeverages"#
# nrows = 2 * 137081 = 274162#
df_alcohol_beverage <- df_trip_spend_calc %>% #
						filter(SpendType == "Alcohol" | SpendType == "Food And Alcohol") %>% #
						spread(SpendType, Expenditure) %>%#
						select(TripIDNumber, Alcohol, FoodAndAlcohol = one_of("Food And Alcohol")) %>%#
						mutate(FoodAndBeverages = FoodAndAlcohol - Alcohol) %>%#
						select(-FoodAndAlcohol) %>% #
						gather("SpendType", "Expenditure", 2:3)#
# This is the data frame: 822486 (6 * 137081) This data frames removes the "alcohol" double counting#
# in the original data set. Format: TripIDNumber, SpendType, Expenditure#
df_trip_spend_new 	<- df_trip_spend_calc %>% #
					filter(!SpendType %in% c("Alcohol", "Food And Alcohol")) %>%#
					bind_rows(df_alcohol_beverage)#
#ASSERT: There is zero accomodation spend for every "day trips"#
stopifnot(sum(df_trips[df_trips$TripType == "Day Trip", "Accom_Spend"]) == 0)#
#
# there are 90693 rows (i.e overnight trips) with accomodation expense#
df_spend_accomodation <- df_trips %>% #
						filter(TripType == "Overnight Trip") %>% #
						select(TripIDNumber, Expenditure = Accom_Spend) %>% #
						mutate(SpendType = "Accomodation") %>%#
						select(TripIDNumber, SpendType, Expenditure)#
#
# here are the full 137,081 rows for transport spend#
df_spend_transport <- df_trips %>% #
						select(TripIDNumber, Expenditure = Trans_Spend) %>% #
						mutate(SpendType = "Transport") %>%#
						select(TripIDNumber, SpendType, Expenditure)#
#
# create a consolidated trip spend: 8 variables. #
# nrows =  (7 * 137081) + (1 * 90693) = 1050260#
df_spend_combined <- bind_rows(df_trip_spend_new, df_spend_accomodation, df_spend_transport)
head(df_trips)
head(df_spend_combined)
xx <- df_trips %>% #
		inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
		filter(TripYear == 2010 & TripQtr == 3 ) %>%#
		group_by(TripType, POV_Group, SpendType)  %>%#
		summarise(total = sum(Expenditure))
xx
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, POV_Group, SpendType)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				arrange(TripType, POV_Group, SpendType) %>% as.data.frame()
df_rec_2010_Q3
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, POV_Group, SpendType)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(total = formatC(round(total,0), format="fg", big.mark = ","))#
				arrange(TripType, POV_Group, SpendType) %>% as.data.frame()
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, POV_Group, SpendType)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(total = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				arrange(TripType, POV_Group, SpendType) %>% as.data.frame()
df_rec_2010_Q3
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(total = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				arrange(TripType, POV_Group, SpendType) %>% as.data.frame()
df_rec_2010_Q3
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(total = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				select(TripType, SpendType, POV_Group, total)#
				arrange(TripType,SpendType, POV_Group) %>% as.data.frame()#
df_rec_2010_Q3
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(total = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				select(TripType, SpendType, POV_Group, total)#
				arrange(TripType,SpendType, POV_Group) %>% as.data.frame()
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(total = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				select(TripType, SpendType, POV_Group, total)#
				arrange(TripType, SpendType, POV_Group) %>% as.data.frame()
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(total = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				arrange(TripType, SpendType, POV_Group) %>% as.data.frame()
df_rec_2010_Q3
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				#mutate(total = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				arrange(TripType, SpendType, POV_Group) %>% as.data.frame()
sum(df_rec_2010_Q3$total)
source('functions/fn_clean_trips .R')
source('functions/fn_clean_trips.R')
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# RELATIONSHIP BETWEEN TRIPS AND TRIP_SPEND#
# trips has 137081 rows trip_spend contains six different categories. Each of these categories#
# has 137081 rows.  The number of rows in trip_spend is 6 * 137081 = 822486#
df_trips <- fn_clean_trips(df_trips)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
#
source('functions/fn_clean_trips.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# RELATIONSHIP BETWEEN TRIPS AND TRIP_SPEND#
# trips has 137081 rows trip_spend contains six different categories. Each of these categories#
# has 137081 rows.  The number of rows in trip_spend is 6 * 137081 = 822486#
df_trips <- fn_clean_trips(df_trips)
unique(df_trips$POV)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# this is a collection of statements that changes a few values#
source('functions/fn_clean_trips.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# RELATIONSHIP BETWEEN TRIPS AND TRIP_SPEND#
# trips has 137081 rows trip_spend contains six different categories. Each of these categories#
# has 137081 rows.  The number of rows in trip_spend is 6 * 137081 = 822486#
#========================================================================#
# TIDY UP df_trips Some values in trips.  This will enable a subsequent join with "df_purpose_lu"#
df_trips <- fn_clean_trips(df_trips)
head(df_trips)
source('functions/fn_clean_spend.R')
xx <- fn_clean_spend(df_trip_spend, df_trips )
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
#
source('functions/fn_clean_spend.R')#
xx <- fn_clean_spend(df_trip_spend, df_trips )
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
#
source('functions/fn_clean_spend.R')#
xx <- fn_clean_spend(df_trip_spend, df_trips )
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
#
source('functions/fn_clean_spend.R')#
xx <- fn_clean_spend(df_trip_spend, df_trips )
source('functions/fn_clean_spend.R')#
#
xx <- fn_clean_spend(df_trip_spend, df_trips )
source('functions/fn_clean_spend.R')#
#
xx <- fn_clean_spend(df_trip_spend, df_trips )
source('functions/fn_clean_spend.R')#
#
xx <- fn_clean_spend(df_trip_spend, df_trips )
source('functions/fn_clean_spend.R')#
#
xx <- fn_clean_spend(df_trip_spend, df_trips )
head(df_trips)
df_trips <- fn_clean_trips(df_trips)
head(df_trips)
source('functions/fn_clean_trips.R')
df_trips <- fn_clean_trips(df_trips)
head(df_trips)
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
source('functions/fn_clean_trips.R')#
df_trips <- fn_clean_trips(df_trips)
head(df_trips)
fn_clean_trips
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
source('functions/fn_clean_trips.R')#
df_trips <- fn_clean_trips(df_trips)
head(df_trips)
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)
source('functions/fn_clean_spend.R')#
#
xx <- fn_clean_spend(df_trip_spend, df_trips )
head(xx)
nrow(xx)
unique(xx$SpendType)
fn_clean_spend
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# this is a collection of statements that changes a few values#
source('functions/fn_clean_trips.R')#
#
source('functions/fn_clean_spend.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
# RELATIONSHIP BETWEEN TRIPS AND TRIP_SPEND#
# trips has 137081 rows trip_spend contains six different categories. Each of these categories#
# has 137081 rows.  The number of rows in trip_spend is 6 * 137081 = 822486#
#========================================================================#
# TIDY UP df_trips Some values in trips.  This will enable a subsequent join with "df_purpose_lu"#
#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
df_trips <- fn_clean_trips(df_trips)#
#
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
df_spend_combined <- fn_clean_spend(df_trip_spend, df_trips )			#
#
#========================================================================#
# Time to focus on df_trip_spend#
#
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				#mutate(total = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				arrange(TripType, SpendType, POV_Group) %>% as.data.frame()
df_rec_2010_Q3
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(totals = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				arrange(TripType, SpendType, POV_Group) %>% as.data.frame()
head(df_rec_2010_Q3)
sum(df_rec_2010_Q3$total)
sum(df_rec_2010_Q3$total) == 1700540403
as.integer(sum(df_rec_2010_Q3$total))
as.integer(sum(df_rec_2010_Q3$total)) == 1700540403
stopifnot(as.integer(sum(df_rec_2010_Q3$total)) == 1700540403)
stopifnot(nrow(anti_join(df_purpose_lu, df_trips, by = c("POV" = "POV"))) == 0)
head(df_trips)
aa <- df_trips %>% select(-ExpenditureWeight, ImputedSpendAccom, ImputedSpendTrnsport, Accom_Spend, Trans_Spend)
head(aa)
aa <- df_trips %>% select(-ExpenditureWeight, -ImputedSpendAccom, -ImputedSpendTrnsport, -Accom_Spend, -Trans_Spend)
head(aa)
aa <- df_trips %>% select(-ExpenditureWeight, -ImputedSpendAccom, -ImputedSpendTrnsport, -Accom_Spend, -Trans_Spend)
head(df_spend_combined)
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(totals = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				arrange(TripType, SpendType, POV_Group) %>% as.data.frame()
head(df_rec_2010_Q3)
stopifnot(as.integer(sum(df_rec_2010_Q3$total)) == 1700540403)
head(df_spend_combined)
unique(df_spend_combined$SpendType)
df_trips_combined 	<- df_trips %>% #
					inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber"))
nrow(df_trips_combined)
head(df_trips_combined)
nrow(df_trips_combined)
# clear everything#
rm(list = ls())#
#
# load some libaries #
#library(lubridate)#
library(dplyr)#
library(stringr)#
library(tidyr)#
#
options(stringsAsFactors = FALSE)#
# do not display in scientific notation#
options(scipen=999, digits = 10)#
#
setwd('/Users/zurich/Documents/TEMP-FILES/MBIE/DTS_STATNZ')#
#
# calculates "length of stay"#
#source('functions/fn_calc_los.R')#
# creates a data.frame of column combinations for use in a group_by#
source('functions/fn_create_column_combinations.R')#
# uses column combinations to create various group_by#
source('functions/fn_create_comb_aggregates.R')#
# appends columns to a data.frame such that resultant df is always 8 columns wide#
source('functions/fn_create_df_with_all.R')#
# appends a data.frame with four columns#
source('functions/fn_create_year_end.R')#
# converts floating point number to text#
source('functions/fn_convert_to_text.R')#
# creates  yearend lookup table#
source('functions/fn_create_YE_lookup.R')#
# takes a dimension lookup and creates a dimension hierarchy#
source('functions/fn_create_dim_hierarchy.R')#
# this is a collection of statements that changes a few values so it can join with "df_purpose_lu"#
source('functions/fn_clean_trips.R')#
# this function cleans up "vw_DTSTripSpend.csv" It removes "alcohol" from "Food and Alcohol"#
source('functions/fn_clean_spend.R')#
# PREAMBLE (data relationships)#
# relationship between df_trips & df_accomodation: a person makes a trip and...#
# stays in accomodation. When a person makes a day trip there is no need for..#
# accomodation. Therefore only "Overnight trips" are included #
# A single trip can have multiple accomodation values as a person..#
# can stay in different hotels in the same or different locations#
# the data is quarterly data#
#
# PLAN OF ATTACK#
# 1) load two CSV files #
# 2) process the two CVS files#
# 3) create a data frame of complete years (where the number of quarters = 4)#
# 4) combine the two data frames and aggregate by: #
#		a) year end (4 quarterly year ends) and#
#		b) four dimension variables#
# 5) aggregate data by: year end and 4 dimensions variables. Include full years only#
# 6) create various aggregate combinations#
# (1) LOAD data#
# (1.1) load trips data (nrow = 137081)#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
#
# (1.2) load and clean purpose of visit look up table data. #
# file obtained from "p:\OTSP\SAS\DTS\Classifications\Purpose.xls"#
df_purpose_lu <- read.csv("inputs/POV_to_POV_Group.csv", header = TRUE) %>% #
		rename_("POV" = "Trip.Purpose.Description", #
		"POV_Group" = "Trip.Purpose.Group.Description..Estimation.") %>%#
		select(POV, POV_Group)#
#
# RELATIONSHIP BETWEEN TRIPS AND TRIP_SPEND#
# trips has 137081 rows trip_spend contains six different categories. Each of these categories#
# has 137081 rows.  The number of rows in trip_spend is 6 * 137081 = 822486#
#
#========================================================================#
# Prepare "Trips" and "TripSpend" data#
#========================================================================#
df_trips <- read.csv("data/vw_DTSTrips.csv", header = TRUE)#
df_trips <- fn_clean_trips(df_trips)#
#
# ASSERT: df_purpose_lu$POV are all contained in df_trips$POV#
stopifnot(nrow(anti_join(df_purpose_lu, df_trips, by = c("POV" = "POV"))) == 0)#
#
df_trip_spend <- read.csv("data/vw_DTSTripSpend.csv" , header = TRUE) %>% #
			filter(is.na(TripID) != TRUE)#
#
# in the original "vw_DTSTripSpend.csv" data, SpendType has 6 levels. We now get#
# accomodation and transport from "vw_DTSTrips.csv" and create 2 additional levels.#
# also "alcohol" is taken out from "food and alcohol" to prevent double counting "alcohol"#
df_spend_combined <- fn_clean_spend(df_trip_spend, df_trips)#
#
# clean off unecessary columns from df_trips.#
df_trips <- df_trips %>% select(-ExpenditureWeight, -ImputedSpendAccom, #
				-ImputedSpendTrnsport, -Accom_Spend, -Trans_Spend)#
#
#========================================================================#
# RECONCILIATION POINT #
# RECONCILIATION POINT. The following code snippet should reconcile to #
# # P:\OTSP\SAS\DTS\Output\2010Q3\reports\Est_Qtr_Expend_Type_Item_Purpose.xls#
# see also \workings\spend_reconciliation.xlsx for easier-to-read formated version of #
# the original spreadsheet#
#========================================================================#
df_rec_2010_Q3 <- df_trips %>% #
				inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber")) %>% #
				filter(TripYear == 2010 & TripQtr == 3 ) %>%#
				group_by(TripType, SpendType, POV_Group)  %>%#
				summarise(total = sum(Expenditure)) %>%#
				mutate(totals = formatC(round(total,0), format="fg", big.mark = ",")) %>%#
				arrange(TripType, SpendType, POV_Group) %>% as.data.frame()#
# ASSERT Total Spend for 2010 Q3 is 1700540403#
stopifnot(as.integer(sum(df_rec_2010_Q3$total)) == 1700540403)#
#
# now we know that our numbers have integrity, we can join the two tables together.#
# expecting 1050260 rows#
df_trips_combined 	<- df_trips %>% #
					inner_join(df_spend_combined, by = c("TripIDNumber" = "TripIDNumber"))
head(df_trips_combined)
df_trips_combined <- fn_create_year_end(df_trips_combined)
nrow(df_trips_combined)
head(df_trips_combined)
# (3.1) create four data frames with unique year ending values#
df_YE_Mar <- df_trips_combined %>% select(TripQtr, YEMar) %>% distinct() %>% rename(YE = YEMar)#
df_YE_Jun <- df_trips_combined %>% select(TripQtr, YEJun) %>% distinct() %>% rename(YE = YEJun)#
df_YE_Sep <- df_trips_combined %>% select(TripQtr, YESep) %>% distinct() %>% rename(YE = YESep)#
df_YE_Dec <- df_trips_combined %>% select(TripQtr, YEDec) %>% distinct() %>% rename(YE = YEDec)
df_YE_all <- bind_rows(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec) %>%#
			group_by(YE) %>% summarise(count = n()) %>% #
			filter(count == 4) %>% select(YE)
head(df_YE_all)
rm(df_YE_Mar, df_YE_Jun, df_YE_Sep, df_YE_Dec)
ls(0)
ls()
rm(df_purpose_lu, df_spend_combined, df_trip_spend, df_trips)
head(df_trips_combined)
df_trips_qtrly <- df_trips_combined %>%  #
	group_by(YEDec, YESep, YEJun, YEMar, Destination_RTO, Trip_Type, POV, POV_Group, SpendType) %>%#
	summarise(Expenditure = sum(Expenditure))
df_trips_qtrly <- df_trips_combined %>%  #
	rename(Destination_RTO = DestinationRTO, Trip_Type = TripType, Spend_Type = SpendType) %>%#
	group_by(YEDec, YESep, YEJun, YEMar, Destination_RTO, Trip_Type, POV, POV_Group, Spend_Type) %>%#
	summarise(Expenditure = sum(Expenditure))
head(df_trips_qtrly)
head(df_trips_qtrly)
df_trips_qtrly <- df_trips_combined %>%  #
	rename(Destination_RTO = DestinationRTO, Trip_Type = TripType, Spend_Type = SpendType) %>%#
	group_by(YEDec, YESep, YEJun, YEMar, Destination_RTO, Trip_Type, POV, POV_Group, Spend_Type) %>%#
	summarise(Total_Expenditure = sum(Expenditure))
head(df_trips_qtrly)
nrow(df_trips_qtrly)
YE <- c(df_trips_qtrly$YEDec, df_trips_qtrly$YESep, df_trips_qtrly$YEJun, df_trips_qtrly$YEMar)#
#
# (5.2) duplicate the same dataframe four times and stack on top of each other#
df_four_quarters <- rbind(df_trips_qtrly, df_trips_qtrly, df_trips_qtrly, df_trips_qtrly)#
#
df_base_aggregates <- cbind(YE, df_four_quarters) %>%#
	select(-c(YEDec, YESep, YEJun, YEMar))  %>%#
	group_by(YE, Destination_RTO, Trip_Type, POV, POV_Group, Trip_Type, Spend_Type) %>%#
	summarise(Expenditure = sum(Expenditure))  %>%  #
	filter(YE %in% df_YE_all$YE)
df_base_aggregates <- cbind(YE, df_four_quarters) %>%#
	select(-c(YEDec, YESep, YEJun, YEMar))
head(df_base_aggregates)
df_trips_qtrly <- df_trips_combined %>%  #
	rename(Destination_RTO = DestinationRTO, Trip_Type = TripType, Spend_Type = SpendType) %>%#
	group_by(YEDec, YESep, YEJun, YEMar, Destination_RTO, Trip_Type, POV, POV_Group, Spend_Type) %>%#
	summarise(Expenditure = sum(Expenditure))
YE <- c(df_trips_qtrly$YEDec, df_trips_qtrly$YESep, df_trips_qtrly$YEJun, df_trips_qtrly$YEMar)#
#
# (5.2) duplicate the same dataframe four times and stack on top of each other#
df_four_quarters <- rbind(df_trips_qtrly, df_trips_qtrly, df_trips_qtrly, df_trips_qtrly)#
#
df_base_aggregates <- cbind(YE, df_four_quarters) %>%#
	select(-c(YEDec, YESep, YEJun, YEMar))  %>%#
	group_by(YE, Destination_RTO, Trip_Type, POV, POV_Group, Trip_Type, Spend_Type) %>%#
	summarise(Expenditure = sum(Expenditure))  %>%  #
	filter(YE %in% df_YE_all$YE)
head(df_base_aggregates)
aa <- df_base_aggregates %>% filter(YE == "YESep1999")
nrow(aa)
unique(df_base_aggregates$YE)
aa <- df_base_aggregates %>% filter(YE == "YESep2010")
nrow(aa)
head(df_base_aggregates)
aa <- df_base_aggregates %>% filter(YE == "YESep2010") %>% #
	group_by(Trip_Type) %>% summarise(total = sum(Expenditure))
aa
df_base_aggregates %>% filter(YE == "YESep2010") %>%  group_by(Trip_Type) %>% summarise(total = sum(Expenditure))
temp_a 	<- df_base_aggregates %>% filter(YE == "YESep2010") %>% #
				group_by(Trip_Type) %>% summarise(total = sum(Expenditure))#
temp_b <- df_base_aggregates %>% filter(YE == "YESep2010") %>% #
				group_by(Trip_Type) %>% summarise(total = sum(Expenditure))
temp_b
temp_b <- df_base_aggregates %>% filter(YE == "YESep2010") %>% #
				group_by(POV_Group) %>% summarise(total = sum(Expenditure))
temp_b
temp_b <- df_base_aggregates %>% filter(YE == "YESep2010") %>% #
				group_by(POV_Group) %>% summarise(total = sum(Expenditure)) %>%#
				mutate(totals = formatC(round(total,0), format="fg", big.mark = ","))
temp_b
sum(temp_b$total)
head(df_base_aggregates)
# (6.1) get the dimenions names#
vct_dim_names <- names(df_base_aggregates)[1:6]#
#
# get measure names#
vct_measure_names <- names(df_base_aggregates)[7]
